[["shiny-colours.html", "Chapter 8 Getting your map layers and colours communicating 8.1 leafletControl() 8.2 shiny inputs to select layers", " Chapter 8 Getting your map layers and colours communicating This chapter will cover: Selecting a layer using leafletcontrol() versus shiny inputs Updating a shape’s style to reduce load time Putting the previous two chapters all together in the shiny app and getting them to talk to each other For these examples, we will use the polygons and rasters from iTRAQI. library(tidyverse) library(sf) download_layer &lt;- function(layer_name, save_dir=&quot;input&quot;) { githubURL &lt;- glue::glue(&quot;https://raw.githubusercontent.com/RWParsons/iTRAQI_app/main/input/layers/{layer_name}&quot;) download.file(githubURL, file.path(save_dir, layer_name), method=&quot;curl&quot;) readRDS(file.path(save_dir, layer_name)) } raster_layer &lt;- download_layer(&quot;rehab_raster.rds&quot;) %&gt;% raster::raster(., layer=1) polygons_layer &lt;- download_layer(&quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;) This chapter will show the different ways we can show different layers on our map. 8.1 leafletControl() Suppose we want to be able to select between three layers, a layer showing remoteness in SA1s and two that show the travel time to acute and rehab care, respectively. Here, we first load some palettes to use for our drive times and remoteness maps. For the remoteness layer, we use greens. Check Chapter 6 for more details on how these palettes work and making the iTRAQI index palette (not used here). # palette for remoteness index paLFac &lt;- colorFactor(&quot;Greens&quot;, levels=0:4, ordered=TRUE, reverse=TRUE) # create index for drive times bins &lt;- c(0, 30, 60, 120, 180, 240, 300, 360, 900, 1200) palBin &lt;- colorBin(&quot;YlOrRd&quot;, domain = min(bins):max(bins), bins=bins, na.color=&quot;transparent&quot;) palNum1 &lt;- colorNumeric(c(palBin(bins[1]), palBin(bins[2])), domain=0:30, na.color=&quot;transparent&quot;) palNum2 &lt;- colorNumeric(c(palBin(bins[2]), palBin(bins[3])), domain=30:60, na.color=&quot;transparent&quot;) palNum3 &lt;- colorNumeric(c(palBin(bins[3]), palBin(bins[4])), domain=60:120, na.color=&quot;transparent&quot;) palNum4 &lt;- colorNumeric(c(palBin(bins[4]), palBin(bins[5])), domain=120:180, na.color=&quot;transparent&quot;) palNum5 &lt;- colorNumeric(c(palBin(bins[5]), palBin(bins[6])), domain=180:240, na.color=&quot;transparent&quot;) palNum6 &lt;- colorNumeric(c(palBin(bins[6]), palBin(bins[7])), domain=240:300, na.color=&quot;transparent&quot;) palNum7 &lt;- colorNumeric(c(palBin(bins[7]), palBin(bins[8])), domain=300:360, na.color=&quot;transparent&quot;) palNum8 &lt;- colorNumeric(c(palBin(bins[8]), palBin(bins[9])), domain=360:900, na.color=&quot;transparent&quot;) palNum9 &lt;- colorNumeric(c(palBin(bins[9]), &quot;#000000&quot;), domain=900:1200, na.color=&quot;transparent&quot;) palNumMix &lt;- function(x){ case_when( x &lt; 30 ~ palNum1(x), x &lt; 60 ~ palNum2(x), x &lt; 120 ~ palNum3(x), x &lt; 180 ~ palNum4(x), x &lt; 240 ~ palNum5(x), x &lt; 300 ~ palNum6(x), x &lt; 360 ~ palNum7(x), x &lt; 900 ~ palNum8(x), x &lt;1200 ~ palNum9(x), x &gt;=1200~ &quot;#000000&quot;, TRUE ~ &quot;transparent&quot; ) } The simplest approach to giving the user the option to change between layers is to add a control panel with leaflet using addLayersControl. However, when the difference between these layers is the aesthetic but not the shape of the polygon, this means that the initial load time of the map is slowed! In the map below, we had to add the SA2 polygons to the map twice and this slowed down the load time. qld_SA2s &lt;- filter(polygons_layer, SA_level==2) qld_SA1s &lt;- filter(polygons_layer, SA_level==1) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data=qld_SA1s, color=&quot;black&quot;, weight=1, fillOpacity=1, fillColor=paLFac(qld_SA1s$ra), group=&quot;SA1 Remoteness&quot; ) %&gt;% addPolygons( data=qld_SA2s, color=&quot;black&quot;, weight=1, fillOpacity=1, fillColor=palNumMix(qld_SA2s$value_acute), group=&quot;SA2 Acute Travel Time&quot; ) %&gt;% addPolygons( data=qld_SA2s, color=&quot;black&quot;, weight=1, fillOpacity=1, fillColor=palNumMix(qld_SA2s$value_rehab), group=&quot;SA2 Rehab Travel Time&quot; ) %&gt;% addLayersControl( position=&quot;topright&quot;, baseGroups=c(&quot;SA1 Remoteness&quot;, &quot;SA2 Acute Travel Time&quot;, &quot;SA2 Rehab Travel Time&quot;), options=layersControlOptions(collapsed = FALSE) ) There are some benefits to using this approach. The main one being that since the control is on the front end, and done by leaflet, the compute effort of changing the displayed layer doesn’t require the shiny server. This is on theme with the recent push for server-less shiny and using observable in quarto documents to get shiny-like behaviour without requiring a shiny server! This approach may also be fine if you don’t have many layers to swap between, they’re not very detailed (like SA1 polygons are!), if you don’t care too much about load time, or if don’t need to trigger any other changes to your app when the selected layer changes. (Un)fortunately for us, iTRAQI had all these things! 8.2 shiny inputs to select layers Firstly, we need to move our control of the layers to shiny inputs rather than using leafletControl(). In this example, aside from replicating what we had with the layerControl() selection, we also add a “None” option to deselect all layers. We use absolutePanel() to create a space over the top of the map that we can put shiny inputs. On it, we add an input for layer_selection using radioButtons(). On the server side, we include a corresponding observe that looks at the input$layer_selection and correspondingly shows and hides groups (using showGroup() and hideGroup()) on the leaflet map, accessed by leafletProxy(). The app is shown below but can it can be run directly from your R console using the following line: shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir=&quot;input/apps/08-shiny-layer-controls-1/&quot;) For the rest of this chapter, when there are example shiny apps, the shiny::runGitHub() option will come after the app code. library(shiny) library(leaflet) library(tidyverse) library(sf) input_dir &lt;- &quot;./input&quot; polygons_layer &lt;- readRDS(file.path(input_dir, &quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;)) ui &lt;- navbarPage( &quot;App-with-a-map&quot;, id=&quot;nav&quot;, tabPanel( &quot;Map&quot;, div( class=&quot;outer&quot;, tags$head( tags$style(HTML(&quot; div.outer { position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0; } &quot; )) ), leafletOutput(&#39;map&#39;, height=&quot;100%&quot;, width=&quot;100%&quot;), absolutePanel( id = &quot;controls&quot;, class = &quot;panel panel-default&quot;, fixed = TRUE, draggable = TRUE, top = 50, left = &quot;auto&quot;, right = 10, bottom = &quot;auto&quot;, width = 330, height = 200, h4(&quot;Layer&quot;), radioButtons( inputId=&quot;layer_selection&quot;, label=NULL, choices=c( &quot;None&quot;, &quot;SA1 Remoteness&quot;, &quot;SA2 Acute Travel Time&quot;, &quot;SA2 Rehab Travel Time&quot; ), selected=&quot;None&quot; ) ) ) ) ) server &lt;- function(input, output, session) { observeEvent(input$layer_selection, { # Find out which groups need to be shown and which need to be hidden based on input$layer_selection. layer_options &lt;- c(&quot;SA1 Remoteness&quot;, &quot;SA2 Acute Travel Time&quot;, &quot;SA2 Rehab Travel Time&quot;) if(input$layer_selection == &quot;None&quot;) { show_group &lt;- c() } else { show_group &lt;- input$layer_selection } hide_groups &lt;- layer_options[layer_options != input$layer_selection] leafletProxy(&quot;map&quot;) %&gt;% hideGroup(hide_groups) %&gt;% showGroup(show_group) }) output$map &lt;- renderLeaflet({ leaflet() %&gt;% addTiles() %&gt;% addPolygons( data=qld_SA1s, color=&quot;black&quot;, weight=1, fillOpacity=1, fillColor=paLFac(qld_SA1s$ra), group=&quot;SA1 Remoteness&quot; ) %&gt;% addPolygons( data=qld_SA2s, color=&quot;black&quot;, weight=1, fillOpacity=1, fillColor=palNumMix(qld_SA2s$value_acute), group=&quot;SA2 Acute Travel Time&quot; ) %&gt;% addPolygons( data=qld_SA2s, color=&quot;black&quot;, weight=1, fillOpacity=1, fillColor=palNumMix(qld_SA2s$value_rehab), group=&quot;SA2 Rehab Travel Time&quot; ) }) } shinyApp(ui, server) shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir=&quot;input/apps/08-shiny-layer-controls-1/&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
