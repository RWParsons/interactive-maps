[["index.html", "Interactive maps with leaflet Preface Suggested citation Author affiliations Prerequisites", " Interactive maps with leaflet Rex Parsons 2022-08-16 Preface Suggested citation TODO: add citation Author affiliations Rex Parsons is a PhD Candidate at the Australian Centre Health Services Innovation, Queensland University of Technology (QUT). He developed the iTRAQI shiny app within his role as Senior Research Assistant at the ARC Centre of Excellence for Mathematical &amp; Statistical Frontiers (ACEMS). Prerequisites This book is intended as a non-comprehensive guide to developing interactive maps with leaflet and shiny and covers the methods that were used in developing the iTRAQI shiny app. Since this book does focus on the applied problem of developing the iTRAQI shiny app, it includes specific methods used there that may be otherwise tricky to find. There is a very small amount of javascript and css used to add certain features to leaflet. I’m not an expert in either of these languages so will not explain in detail how they work but will link to the sources that may explain it better. For a more comprehensive introduction to leaflet, see the leaflet documentation. For a more comprehensive introduction to shiny, see the Mastering Shiny book A beginner-to-intermediate level of R is assumed. Below is a list of packages that will be used. You can run the code to install those that are missing on your system. pkgs &lt;- c( &quot;tidyverse&quot;, &quot;sf&quot;, &quot;sp&quot;, &quot;gstat&quot;, &quot;shiny&quot;, &quot;leaflet&quot;, &quot;raster&quot;, &quot;rmapshaper&quot;, &quot;RCurl&quot;, &quot;glue&quot; ) required_packages &lt;- pkgs[!pkgs %in% installed.packages()] if (length(required_packages) &gt; 0) { cat(&quot;Installing the following packages: \\n&quot;, paste0(required_packages, collapse = &quot;, &quot;)) install.packages(required_packages) } else { cat(&quot;All required packages already installed!&quot;) } "],["intro.html", "Chapter 1 Introduction 1.1 leaflet layers", " Chapter 1 Introduction This book focuses on using leaflet and shiny together to make interactive maps. Here’s a simple leaflet map. library(leaflet) leaflet() %&gt;% addTiles() %&gt;% # Add default OpenStreetMap map tiles addMarkers(lng = 174.768, lat = -36.852, popup = &quot;The birthplace of R&quot;) Figure 1.1: Simple leaflet map Before we begin adding to this map, we need to create the layers that we want to add. In the iTRAQI app, we used markers, rasters and polygons to show the key locations and interpolations. See the iTRAQI shiny app here and read more about it in the information tab of the app. Chapter 2 will focus on these first steps, before making any maps or interactivity. If you’re already well-versed in making these layers and the sf R package, you can skip to the latter chapters. 1.1 leaflet layers To display statistical area level 1 and 2 (SA1 and SA2) regions on the map, we will be using sf objects with MULTIPOLYGON geometries. These are multipolygons because some of these areas include distinct areas, such as a set of islands, that aren’t contained within a single polygon. To display the location of acute and rehab centers and town locations with travel times that we used for interpolations, we used (spatial) data.frames that had longitudes and latitudes for their location. To display the continuous interpolations, we used RasterLayer objects. Using a polygon and raster layer that’s used in the iTRAQI map and some markers in a data.frame, we can make see the basic approach that we use to display these on a leaflet map. First, lets make a data.frame with the coordinates for the Princess Alexandra and Townsville University Hospitals, and download a raster and polygon layer from the iTRAQI app GitHub repository. library(tidyverse) library(sf) download_layer &lt;- function(layer_name, save_dir = &quot;input&quot;) { githubURL &lt;- glue::glue(&quot;https://raw.githubusercontent.com/RWParsons/iTRAQI_app/main/input/layers/{layer_name}&quot;) download.file(githubURL, file.path(save_dir, layer_name), method = &quot;curl&quot;) readRDS(file.path(save_dir, layer_name)) } raster_layer &lt;- download_layer(&quot;rehab_raster.rds&quot;) %&gt;% raster::raster(., layer = 1) polygons_layer &lt;- download_layer(&quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;) polygons_layer &lt;- polygons_layer[polygons_layer$SA_level == 2, ] # show SA2 regions for example marker_locations &lt;- data.frame( centre_name = c(&quot;Princess Alexandra Hospital (PAH)&quot;, &quot;Townsville University Hospital&quot;), x = c(153.033519, 146.762041), y = c(-27.497374, -19.320502) ) Here, in figure 1.2, we make a leaflet map with the three object types. We will use these three functions, addPolygons(), addRasterImage(), and addMarkers() to add almost all of the content to our leaflet maps. leaflet() %&gt;% addProviderTiles(&quot;CartoDB.VoyagerNoLabels&quot;) %&gt;% # add a simple base map addPolygons( data = polygons_layer, fillColor = &quot;Orange&quot;, color = &quot;black&quot;, weight = 1, group = &quot;Polygons&quot; ) %&gt;% addRasterImage( x = raster_layer, colors = &quot;YlOrRd&quot;, group = &quot;Raster&quot; ) %&gt;% addMarkers( lng = marker_locations$x, lat = marker_locations$y, label = marker_locations$centre_name, group = &quot;Points&quot; ) %&gt;% addLayersControl( position = &quot;topright&quot;, baseGroups = c(&quot;Polygons&quot;, &quot;Raster&quot;, &quot;Points&quot;), options = layersControlOptions(collapsed = FALSE) ) Figure 1.2: leaflet map with polygons, rasters and markers Almost all of these objects were made before being used in the shiny app. Chapter 2 will introduce the methods used to make them. Chapter 3 will introduce the basics of a shiny app. The following chapters will introduce the more specific methods that were used to construct the iTRAQI app itself. "],["building.html", "Chapter 2 Creating the layers 2.1 Kriging 2.2 Polygons", " Chapter 2 Creating the layers This chapter will cover the necessary steps to make layers which will be visualised in the app: kriging spatial joins aggregating interpolations within polygons 2.1 Kriging Kriging is an interpolation method that we use for iTRAQI. We pass observed values with known outcomes and coordinates and use kriging to get predicted values for new coordinates (the rest of Queensland). 2.1.1 Data First, we will download the data that we used for acute care travel time. Each row in the data has a coordinate (x,y) and outcome that we will be using for interpolation (time) Table 2.1 and figure 2.1 show a preview of the data that we will be using. library(tidyverse) library(leaflet) save_dir &lt;- &quot;input&quot; githubURL &lt;- glue::glue(&quot;https://raw.githubusercontent.com/RWParsons/iTRAQI_app/main/input/QLD_locations_with_RSQ_times_20220718.csv&quot;) download.file(githubURL, file.path(save_dir, &quot;df_towns.csv&quot;), method = &quot;curl&quot;) df_towns &lt;- read.csv(file.path(save_dir, &quot;df_towns.csv&quot;)) %&gt;% select(location, x, y, centre = acute_care_centre, time = acute_time) knitr::kable( head(df_towns, 10), caption = &quot;A preview of the data used for kriging&quot;, booktabs = TRUE ) Table 2.1: A preview of the data used for kriging location x y centre time Boigu Island 142.2153 -9.260192 Townsville University Hospital 493 Saibai Island 142.6217 -9.380440 Townsville University Hospital 491 Erub (Darnley) Island 143.7703 -9.585443 Townsville University Hospital 527 Yorke Island 143.4073 -9.750172 Townsville University Hospital 503 Iama (Yam) Island 142.7744 -9.900403 Townsville University Hospital 466 Mer (Murray) Island 144.0504 -9.918105 Townsville University Hospital 534 Mabuiag Island 142.1829 -9.957180 Townsville University Hospital 449 Badu Island 142.1388 -10.123220 Townsville University Hospital 440 St Pauls 142.3349 -10.184880 Townsville University Hospital 436 Warraber Island 142.8238 -10.207260 Townsville University Hospital 456 leaflet() %&gt;% addProviderTiles(&quot;CartoDB.VoyagerNoLabels&quot;) %&gt;% addCircleMarkers( lng = df_towns$x, lat = df_towns$y, popup = glue::glue( # customise your popups with html tags &quot;&lt;b&gt;Location: &lt;/b&gt;{df_towns$location}&lt;br&gt;&quot;, &quot;&lt;b&gt;Time to acute care (minutes): &lt;/b&gt;{df_towns$time}&quot; ), radius = 2, fillOpacity = 0, ) Figure 2.1: leaflet map with locations We will convert our data.frame into a spatial data.frame and load the gstat package as we will be using it for the kriging (gstat::krige()). library(sp) library(gstat) library(sf) coordinates(df_towns) &lt;- ~ x + y 2.1.2 Making a grid of values for interpolation Another key ingredient to do kriging is to have a grid of coordinates for which we want predictions (QLD). The code below achieves this by creating a grid across all coordinates of QLD and keeping only those which intersect with the QLD boundary polygon. The initial grid contains coordinates for all combinations of latitudes and longitudes in QLD (which includes a lot of water of the north east for which we don’t need interpolated values). Figure 2.2 shows the initial grid made using sp::makegrid() in blue and the intersect between this and the QLD boundary in orange. We will use the values which are within the QLD boundary for kriging. The cellsize we use here is large to save computation time (and to highlight a problem that we will come across very soon). This controls the resolution of the interpolation - the smaller the cellsize, the greater the spatial resolution. This is in degrees units (0.1 degree = 11.1km) so only having one prediction for every 11.1km² in QLD may mean that we miss out on some valuable information! (I’ll come back to this!) aus &lt;- raster::getData(&quot;GADM&quot;, path = &quot;input&quot;, country = &quot;AUS&quot;, level = 1) qld_boundary &lt;- aus[aus$NAME_1 == &quot;Queensland&quot;, ] qld_boundary_sf &lt;- st_as_sfc(qld_boundary) cellsize &lt;- 0.05 grid &lt;- makegrid(qld_boundary, cellsize = cellsize) pnts_sf &lt;- st_as_sf(grid, coords = c(&quot;x1&quot;, &quot;x2&quot;), crs = st_crs(qld_boundary)) pnts_in_qld &lt;- st_intersection(pnts_sf, qld_boundary_sf) %&gt;% st_coordinates() %&gt;% as.data.frame() ggplot() + geom_point(data = grid, aes(x1, x2), col = &quot;blue&quot;) + geom_point(data = pnts_in_qld, aes(X, Y), col = &quot;orange&quot;) + coord_equal() + labs( x = &quot;Longitude&quot;, y = &quot;Latitude&quot; ) Figure 2.2: coordinates that we will use for kriging (initial grid in blue and those than intersect with QLD boundary in orange) 2.1.3 Kriging (finally) Now we are ready to do the kriging. gstat::krige() requires that the newdata be of class Spatial, sf, or stars. Here, I specify the coordinates using sp::coordinates(). It also requires that you specify the variogram model within - here we use a circular model vgm(\"Cir\") but there may be better choices for other data. Figure 2.3 shows the map with the interpolated values from kriging. lzn_vgm &lt;- variogram(time ~ 1, df_towns) lzn_fit &lt;- fit.variogram(lzn_vgm, model = vgm(&quot;Sph&quot;)) coordinates(pnts_in_qld) &lt;- ~ X + Y kriged_layer &lt;- krige( formula = time ~ 1, locations = df_towns, newdata = pnts_in_qld, model = lzn_fit ) %&gt;% as.data.frame() ## [using ordinary kriging] ggplot(data = kriged_layer, aes(X, Y, col = var1.pred)) + geom_point() + scale_colour_gradientn(colors = c(&quot;yellow&quot;, &quot;orange&quot;, &quot;red&quot;, &quot;black&quot;)) + coord_equal() + labs( x = &quot;Longitude&quot;, y = &quot;Latitude&quot; ) Figure 2.3: coordinates that we will use for kriging (initial grid in blue and those than intersect with QLD boundary in orange) 2.1.4 Making rasters Now we can turn our grid of interpolated values into the rasters that we can then use in a leaflet map. We use the raster package. Figure ?? shows our kriged output as a raster on a leaflet map, the same type of objects as what’s used in iTRAQI. raster_layer &lt;- raster::rasterFromXYZ(kriged_layer, crs = 4326, res = 0.05) raster_layer &lt;- raster::raster(raster_layer, layer = 1) # layer=1 to select the prediction values rather than the variance leaflet() %&gt;% addProviderTiles(&quot;CartoDB.VoyagerNoLabels&quot;) %&gt;% addRasterImage(x = raster_layer, colors = &quot;YlOrRd&quot;) Figure 2.4: coordinates that we will use for kriging (initial grid in blue and those than intersect with QLD boundary in orange) 2.2 Polygons We are going to download our polygons from the Australian Bureau of Statistics. The link to the downloads page for the 2016 Australian Statistical Geography Standard (ASGS) files are here and the particular file that we are going to download is the ‘Queensland Mesh Blocks ASGS Ed 2016 Digital Boundaries in ESRI Shapefile Format’. You will have to download the zipped file and unzip it somewhere locally. I’ve done so and saved it in the same directory as the other downloaded files and unzipped it into a folder there called ‘qld_shape’. Having done that, I can import it using st_read() qld_SAs2016 &lt;- st_read(file.path(save_dir, &quot;qld_shape/MB_2016_QLD.shp&quot;)) ## Reading layer `MB_2016_QLD&#39; from data source ## `C:\\Users\\Rex\\Documents\\R_projects\\interactive-maps\\input\\qld_shape\\MB_2016_QLD.shp&#39; ## using driver `ESRI Shapefile&#39; ## replacing null geometries with empty geometries ## Simple feature collection with 69764 features and 16 fields (with 25 geometries empty) ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 137.9943 ymin: -29.1779 xmax: 153.5522 ymax: -9.142176 ## Geodetic CRS: GDA94 head(qld_SAs2016) ## Simple feature collection with 6 features and 16 fields (with 1 geometry empty) ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 144.5488 ymin: -22.97163 xmax: 147.0728 ymax: -19.24556 ## Geodetic CRS: GDA94 ## MB_CODE16 MB_CAT16 SA1_MAIN16 SA1_7DIG16 SA2_MAIN16 SA2_5DIG16 ## 1 30000009499 NOUSUALRESIDENCE 39999949999 3949999 399999499 39499 ## 2 30000010000 Parkland 31802148912 3148912 318021489 31489 ## 3 30000020000 Parkland 31802148912 3148912 318021489 31489 ## 4 30000030000 Parkland 31802148912 3148912 318021489 31489 ## 5 30000050000 Residential 31503140809 3140809 315031408 31408 ## 6 30000160000 Residential 31503140808 3140808 315031408 31408 ## SA2_NAME16 SA3_CODE16 SA3_NAME16 SA4_CODE16 ## 1 No usual address (Qld) 39999 No usual address (Qld) 399 ## 2 Townsville - South 31802 Townsville 318 ## 3 Townsville - South 31802 Townsville 318 ## 4 Townsville - South 31802 Townsville 318 ## 5 Barcaldine - Blackall 31503 Outback - South 315 ## 6 Barcaldine - Blackall 31503 Outback - South 315 ## SA4_NAME16 GCC_CODE16 GCC_NAME16 STE_CODE16 ## 1 No usual address (Qld) 39499 No usual address (Qld) 3 ## 2 Townsville 3RQLD Rest of Qld 3 ## 3 Townsville 3RQLD Rest of Qld 3 ## 4 Townsville 3RQLD Rest of Qld 3 ## 5 Queensland - Outback 3RQLD Rest of Qld 3 ## 6 Queensland - Outback 3RQLD Rest of Qld 3 ## STE_NAME16 AREASQKM16 geometry ## 1 Queensland 0.0000 POLYGON EMPTY ## 2 Queensland 0.0387 POLYGON ((147.0641 -19.2466... ## 3 Queensland 0.0071 POLYGON ((147.0715 -19.2576... ## 4 Queensland 0.0004 POLYGON ((147.0615 -19.2460... ## 5 Queensland 0.0432 POLYGON ((145.2406 -22.9713... ## 6 Queensland 0.2156 POLYGON ((144.5493 -22.5902... This data has polygons for every Statistical Area level 1 (SA1) in Queensland but also details the SA2, SA3, and SA4 that that area is within. If we want to only use SA1’s then we are fine to use the data here, but if we want to use these higher levels too, then we would either need (1) make a new object with dissolved boundaries within that higher level or (2) download more files from the ABS for those specific levels and filter to keep only Queensland. These files that we could use, say for SA2’s are called ‘Statistical Area Level 2 (SA2) ASGS Ed 2016 Digital Boundaries in ESRI Shapefile Format’, available at that same link. Since it’s easy to filter, and reading this book is about learning new things (and my github repository is limited to 100mb), I’ll show you the first approach that aggregates polygons within these higher levels. Before we make a function to aggregate within different levels, I’m going to rename the columns in the object so that they’re all named consistently - you may have noticed the unique identifier for SA1’s is called ‘SA1_MAIN16’ whereas for SA3’s it’s called ‘SA3_CODE16’. I prefer ‘CODE’. qld_SAs2016 &lt;- rename(qld_SAs2016, SA1_CODE16 = SA1_MAIN16, SA2_CODE16 = SA2_MAIN16) 2.2.1 Dissolving polygons to get SA2s and SA3s The function below will dissolve the boundaries for all the polygons within the SA-level that we pick. The work here is done by rmapshaper::ms_dissolve(). I’ll use this to make separate objects for SA2s and SA3s. Since this returns back only the geometry of the polygon and the name, I’ll make the same change for my SA1s. By selecting only the code, I get the object with the code AND the geometry - unless I transform the object into a data.frame first, it will always keep the geometry. aggregate_by_SA &lt;- function(qld_sf, SA_number) { sa_main &lt;- glue::glue(&quot;SA{SA_number}_CODE16&quot;) if (!sa_main %in% names(qld_sf)) { return(message(sa_main, &quot; was not found in polygon layer&quot;)) } message(glue::glue(&quot;----- grouping polygons within SA{SA_number} -----&quot;)) rmapshaper::ms_dissolve(qld_sf, sa_main) } qld_SA2s &lt;- aggregate_by_SA(qld_sf = qld_SAs2016, SA_number = 2) ## ----- grouping polygons within SA2 ----- ## Registered S3 method overwritten by &#39;geojsonlint&#39;: ## method from ## print.location dplyr qld_SA3s &lt;- aggregate_by_SA(qld_sf = qld_SAs2016, SA_number = 3) ## ----- grouping polygons within SA3 ----- qld_SA1s &lt;- qld_SAs2016 %&gt;% select(SA1_CODE16) head(qld_SA1s) ## Simple feature collection with 6 features and 1 field (with 1 geometry empty) ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 144.5488 ymin: -22.97163 xmax: 147.0728 ymax: -19.24556 ## Geodetic CRS: GDA94 ## SA1_CODE16 geometry ## 1 39999949999 POLYGON EMPTY ## 2 31802148912 POLYGON ((147.0641 -19.2466... ## 3 31802148912 POLYGON ((147.0715 -19.2576... ## 4 31802148912 POLYGON ((147.0615 -19.2460... ## 5 31503140809 POLYGON ((145.2406 -22.9713... ## 6 31503140808 POLYGON ((144.5493 -22.5902... head(qld_SA2s) ## Simple feature collection with 6 features and 1 field (with 1 geometry empty) ## Geometry type: GEOMETRY ## Dimension: XY ## Bounding box: xmin: 141.4665 ymin: -25.75471 xmax: 147.2964 ymax: -12.56014 ## Geodetic CRS: GDA94 ## SA2_CODE16 geometry ## 1 399999499 MULTIPOLYGON EMPTY ## 2 318021489 MULTIPOLYGON (((147.0641 -1... ## 3 315031408 POLYGON ((143.6141 -22.5387... ## 4 306051166 POLYGON ((145.4269 -17.1212... ## 5 306051169 POLYGON ((145.5535 -17.1354... ## 6 315011395 MULTIPOLYGON (((141.765 -12... There are some empty geometries here, so we find (and then remove) these using st_is_empty(). qld_SA1s &lt;- qld_SA1s[!st_is_empty(qld_SA1s), , drop = FALSE] qld_SA2s &lt;- qld_SA2s[!st_is_empty(qld_SA2s), , drop = FALSE] qld_SA3s &lt;- qld_SA3s[!st_is_empty(qld_SA3s), , drop = FALSE] Run the code to become impatient and find out how long it takes leaflet to display such a detailed polygon layer. leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA1s, fillColor = &quot;Orange&quot;, color = &quot;black&quot;, weight = 1 ) 2.2.2 Simplifying polygons to reduce rendering time with leaflet We need to do something about this - fortunately, we don’t need all the incredible amounts of detail in the polygons for our map, so we can simplify them using rmapshaper::ms_simplify(). Simplifying the polygons can take a few minutes but it makes the maps much faster to display. qld_SA1s &lt;- rmapshaper::ms_simplify(qld_SA1s, keep = 0.03) qld_SA2s &lt;- rmapshaper::ms_simplify(qld_SA2s, keep = 0.03) qld_SA3s &lt;- rmapshaper::ms_simplify(qld_SA3s, keep = 0.03) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA1s, fillColor = &quot;yellow&quot;, color = &quot;black&quot;, weight = 1, group = &quot;SA1&quot; ) %&gt;% addPolygons( data = qld_SA2s, fillColor = &quot;orange&quot;, color = &quot;black&quot;, weight = 1, group = &quot;SA2&quot; ) %&gt;% addPolygons( data = qld_SA3s, fillColor = &quot;red&quot;, color = &quot;black&quot;, weight = 1, group = &quot;SA3&quot; ) %&gt;% addLayersControl( position = &quot;topright&quot;, baseGroups = c(&quot;SA1&quot;, &quot;SA2&quot;, &quot;SA3&quot;), options = layersControlOptions(collapsed = FALSE) ) 2.2.3 Spatial joins and aggregations To get estimates and ranges for travel times within each SA1 and SA2 for iTRAQI, we aggregated the interpolated values within those polygons. To do this, we need to first (1) join the data that we made from kriging to the polygons data, and (2) aggregate the values within those areas to calculate the summary statistics that we want to show. Here is the data that we made from kriging previously. head(select(kriged_layer, -var1.var), 5) ## X Y var1.pred ## 1 151.35 -29.15 211.7754 ## 2 151.40 -29.15 211.6103 ## 3 151.30 -29.10 209.3144 ## 4 151.35 -29.10 208.9727 ## 5 151.40 -29.10 208.8969 2.2.3.1 Joins We do this join using sf::st_join() but this requires that both the sf objects for the polygons and the kriging points share the same coordinates system. First, we need to make our kriging data into a spatial data.frame then set the coordinate reference system (crs) to match. The polygons that we downloaded from the ABS used the GDA94 reference system and this can be matched to EPSG:4283 online. kriged_df &lt;- kriged_layer %&gt;% select(-var1.var) coordinates(kriged_df) &lt;- ~ X + Y kriged_sf &lt;- st_as_sf(kriged_df) kriged_sf &lt;- st_set_crs(kriged_sf, 4283) Having asigned the appropriate crs, we can use st_join (if the crs of both objects isn’t the same, st_join will throw an error). Now the resulting object has about the same number of features (rows) as we had in the interpolation data qld_SA3s_joined &lt;- st_join(qld_SA3s, kriged_sf) head(qld_SA3s_joined) ## Simple feature collection with 6 features and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 146.1469 ymin: -19.7847 xmax: 147.1202 ymax: -18.92276 ## Geodetic CRS: GDA94 ## SA3_CODE16 var1.pred geometry ## 1 31802 98.72870 MULTIPOLYGON (((146.3237 -1... ## 1.1 31802 99.84339 MULTIPOLYGON (((146.3237 -1... ## 1.2 31802 101.19640 MULTIPOLYGON (((146.3237 -1... ## 1.3 31802 85.83868 MULTIPOLYGON (((146.3237 -1... ## 1.4 31802 85.69469 MULTIPOLYGON (((146.3237 -1... ## 1.5 31802 86.06755 MULTIPOLYGON (((146.3237 -1... nrow(qld_SA3s_joined) ## [1] 60863 nrow(kriged_df) ## [1] 60888 2.2.3.2 Aggregations If you’re familiar with the dplyr:: ways of grouping and aggregating, then this step will be familiar to working with data.frames. To this larger dataset within the unique polygons, we use group_by and summarise. Here, we will get the minimum, maximum, and median of the predicted values. qld_SA3s_aggregated &lt;- qld_SA3s_joined %&gt;% group_by(SA3_CODE16) %&gt;% summarize( min = min(var1.pred), max = max(var1.pred), median = median(var1.pred) ) Unfortunately, this is incredibly slow for some reason! It’s much faster to take the data out from the sf object, do the aggregations and then join it back to the original sf object before we did the join. qld_SA3s_joined_df &lt;- as.data.frame(qld_SA3s_joined) %&gt;% select(-geometry) qld_SA3s_aggregated_df &lt;- qld_SA3s_joined_df %&gt;% group_by(SA3_CODE16) %&gt;% summarize( min = min(var1.pred), max = max(var1.pred), median = median(var1.pred) ) qld_SA3s_aggregated &lt;- left_join(qld_SA3s, qld_SA3s_aggregated_df, by = &quot;SA3_CODE16&quot;) To check that these aggregations look right, lets make a map to visualise the medians across different SA3s. fill_value &lt;- qld_SA3s_aggregated$median pal &lt;- colorNumeric(&quot;YlOrRd&quot;, domain = fill_value) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA3s_aggregated, fillColor = pal(qld_SA3s_aggregated$median), color = &quot;black&quot;, weight = 1, fillOpacity = 0.8 ) Looks good… except? leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA3s_aggregated, fillColor = pal(qld_SA3s_aggregated$median), color = &quot;black&quot;, weight = 1, fillOpacity = 0.8 ) %&gt;% setView(153.026358, -27.468562, zoom = 11) There’s a section which is greyed out - this means that the aggregations returned NA. Let’s plot the coordinates which we have interpolated values for over the top. kriged_coordinates &lt;- as.data.frame(coordinates(kriged_df)) %&gt;% filter(X &lt; 153.5, X &gt; 152.3, Y &lt; -27, Y &gt; -28) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA3s_aggregated, fillColor = pal(qld_SA3s_aggregated$median), color = &quot;black&quot;, weight = 1, fillOpacity = 0.8 ) %&gt;% setView(153.026358, -27.468562, zoom = 11) %&gt;% addCircleMarkers( lng = kriged_coordinates$X, lat = kriged_coordinates$Y, radius = 0.2 ) Looks like we missed the target with our the coordinates that we have interpolations for! There was a little primer to this problem when introducing the for kriging grid. There are a couple solutions to this (that I can think of): Do a ludicrously granular grid for kriging so that we almost certainly have a point within every polygon, say every 50 square meters. We add some points to the grid for kriging so that we ensure that we have at least 1 or more points within each polygon. For iTRAQI, we did the latter. SA1s can be pretty small, so I don’t want to have to keep trying smaller and smaller cell sizes for the kriging grid until I don’t get any NA’s. It’s easier (and a lot faster) to get the centroid (coordinate for the centre) of every polygon and append this to the grid we use for kriging. You can get the centroid of each polygon by using sf::st_centroid() and the coordinates out of this object with sf::st_coordinates(). In the map below, we get these centroids and add them as additional coordinates to the map in red. centroids &lt;- st_centroid(qld_SA3s, of_largest_polygon = TRUE) centroid_coords &lt;- as.data.frame(st_coordinates(centroids)) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA3s_aggregated, fillColor = pal(qld_SA3s_aggregated$median), color = &quot;black&quot;, weight = 1, fillOpacity = 0.8 ) %&gt;% setView(153.026358, -27.468562, zoom = 11) %&gt;% addCircleMarkers( lng = kriged_coordinates$X, lat = kriged_coordinates$Y, radius = 0.2 ) %&gt;% addCircleMarkers( lng = centroid_coords$X, lat = centroid_coords$Y, color = &quot;red&quot;, radius = 0.2 ) They’re on target! The remaining steps would be to append this to the grid used for kriging, repeat the spatial join and aggregate within polygons. However, I’m going to skip these steps and get straight into the shiny app development using the polygons that I’ve already made for iTRAQI. "],["shiny-intro.html", "Chapter 3 An app with a map 3.1 A bare bones shiny app 3.2 Leaflet maps in shiny 3.3 Leaflet vs shiny interactivity", " Chapter 3 An app with a map This chapter will have a brief intro to shiny with a map: ui and server reactivity leaflet leafletproxy 3.1 A bare bones shiny app The most basic shiny app has a user-interface (ui) and a back-end (server) side. We control what content appears where on within the ui, and we control all the clever interactivity and generated content on the server side. library(shiny) ui &lt;- fluidPage() server &lt;- function(input, output, session) { } shinyApp(ui, server) This book will include many example shiny apps and accompanying code. However, since it’d be very time consuming to host all those apps independently, I will instead provide the code and sometimes an image of how the app displays. With every example app there will be a followup line of code with shiny::runGitHub(...) that you can use to run the app locally. If you run this line in R on your own computer, it will run the app in a way that you can then interact with it. The inputs on the ui side always have an inputId and it is by this name that we access those values from the server. In the code below, we name an input as ‘n’ and we access it in the server by calling input$n. By accessing this input in such as way, within the expression used for renderPlot(), we are are asking the server side to update the plot every time that any inputs (input$___) used within it are updated. library(shiny) ui &lt;- fluidPage( numericInput(inputId = &quot;n&quot;, label = &quot;sample size&quot;, value = 10), plotOutput(&quot;plot&quot;) ) server &lt;- function(input, output, session) { output$plot &lt;- renderPlot(expr = { hist(x = rnorm(input$n)) }) } shinyApp(ui, server) ## ## Listening on http://127.0.0.1:6508 (And here’s your code to run the app locally) shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir = &quot;input/apps/03-01-example-app/&quot;) 3.2 Leaflet maps in shiny We’re not here to make histograms, we’re here to make maps! I prefer the navigation between tabs (which you may want later) using navbarPage to design my ui. These pages contain many panels that you can navigate between. Here’s an app with a single tabPanel which contains our map. library(shiny) library(leaflet) library(tidyverse) library(sf) input_dir &lt;- &quot;./input&quot; sa2_polygons &lt;- readRDS(file.path(input_dir, &quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;)) %&gt;% filter(SA_level == 2) ui &lt;- navbarPage( &quot;App-with-a-map&quot;, id = &quot;nav&quot;, tabPanel( &quot;Map&quot;, leafletOutput(&quot;map&quot;) ) ) server &lt;- function(input, output, session) { output$map &lt;- renderLeaflet({ leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = sa2_polygons, fillColor = &quot;Orange&quot;, color = &quot;black&quot;, weight = 1, group = &quot;Polygons&quot; ) }) } shinyApp(ui, server) shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir = &quot;input/apps/03-02-first-leaflet-map/&quot;) 3.2.1 Filling the space You might notice a few things here that you’d like to change with the ui already. Without getting into details like the colours of the panels, a major issue is that the map doesn’t fill the entire space in the panel. Before we get into user-inputs, and for my own sanity, this has to be fixed. Unfortunately, this is a surprisingly annoying thing to do. If you change the height and width of the map to be 100% of the viewport height and width (by using height=\"100vh\", width=\"100vw\" in leafletOutput()) then you end up with a padding distance between the map and the panel, and an offset from above due to the height of the top panel bar. The best solution is to create a division (div), remove its padding, and fill the space left with the map (100%). This means a little bit of CSS code and then assigning it to the division which wraps the map. I get the CSS code and the division to talk to eachother by assigning the class of the division to be ‘outer’ and assigning the aesthetic changes to ‘div.outer’ in the CSS code. The 41px that I remove at the top is due to the top bar of the navbarPage being 41px high. library(shiny) library(leaflet) library(tidyverse) library(sf) input_dir &lt;- &quot;./input&quot; sa2_polygons &lt;- readRDS(file.path(input_dir, &quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;)) %&gt;% filter(SA_level == 2) ui &lt;- navbarPage( &quot;App-with-a-map&quot;, id = &quot;nav&quot;, tabPanel( &quot;Map&quot;, div( class = &quot;outer&quot;, tags$head( tags$style(HTML(&quot; div.outer { position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0; } &quot;)) ), leafletOutput(&quot;map&quot;, height = &quot;100%&quot;, width = &quot;100%&quot;) ) ) ) server &lt;- function(input, output, session) { output$map &lt;- renderLeaflet({ leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = sa2_polygons, fillColor = &quot;Orange&quot;, color = &quot;black&quot;, weight = 1, group = &quot;Polygons&quot; ) }) } shinyApp(ui, server) shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir = &quot;input/apps/03-03-fill-panel-with-css/&quot;) Now we have an app with a map, not just an app with a map (and painfully empty space). 3.3 Leaflet vs shiny interactivity There are interactive elements which come in leaflet before even incorporating shiny. For example, in the previous chapter we made a leaflet map that had a layer selector which gives the user control over what polygon layer (SA1, SA2, SA3) was being displayed on the map. This functionality is all leaflet based and incorporating it into a shiny app doesn’t require adding any inputs to the ui side of the shiny app! This is great, because it doesn’t depend on the server side to do any heavy lifting, and it can be functional while the server side is busy doing other operations. If possible, it’s best to make use of this interactivity that leaflet has to offer: this means less code to maintain and less work for the server where you host your shiny app. However, we will need to incorporate shiny inputs at the point where we want to add features to our app that leaflet doesn’t have for us. To do this, we update our map very differently to how we updated the histogram in our first app example. Re-making the map is computationally expensive and would drastically slow down how quick the map responds to your inputs. In the histogram example, we used the following code. output$plot &lt;- renderPlot(expr = { hist(x = rnorm(input$n)) }) renderPlot() takes a few arguments but the one we care most about is the first: expr. Since it’s always the first argument of all the render___() functions, we don’t normally bother with the expr=. This is the expression (code) that creates the plot. Since it reads an input, every time that the input$n is updated, the server side reacts by updating it’s output which is then displayed to the user. For our leaflet maps, we don’t want to use user inputs in our renderLeaflet() expression as this would mean redrawing the content delays for the user. Instead, we observe changes to the inputs and update our map via a proxy. In the app below, we add some leaflet interactivity as well as some shiny reactivity. This map has a toggle to switch between showing the polygons and towns. Also, clicking on the markers for the towns will show a popup. The popup content is assigned when adding the circle markers (addCircleMarkers()) and you can use HTML tags to customise how it displays. All of this interactivity was made when we first rendered the leaflet map. We also added an panel to hold a drop down menu containing names of all the towns that we have on the plot. If you select a town, this updates the input\\(town_name which triggers some reactivity since it is being observed. When a town is selected, the map will zoom to its coordinates. If none is selected, it zooms out to look at all of Queensland. This part is controlled by shiny reactivity. It updates the existing map by using `leafletProxy()`. This takes one argument: the id of the map, which is the same as the output id (we used `output\\)map) so we update our map withleafletProxy(mapId=“map”). This functionality is only for shiny apps and shiny docs, it allows us to add or modify content on our existing map without having to render it again. We used theflyToandflyToBounds` functions to update our map to move to the given location. However, we could can make all sorts of modifications and additions to our map in this way! library(shiny) library(leaflet) library(tidyverse) library(sf) input_dir &lt;- &quot;./input&quot; sa2_polygons &lt;- readRDS(file.path(input_dir, &quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;)) %&gt;% filter(SA_level == 2) towns &lt;- read.csv(file.path(input_dir, &quot;df_towns.csv&quot;)) ui &lt;- navbarPage( &quot;App-with-a-map&quot;, id = &quot;nav&quot;, tabPanel( &quot;Map&quot;, div( class = &quot;outer&quot;, tags$head( tags$style(HTML(&quot; div.outer { position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0; } &quot;)) ), leafletOutput(&quot;map&quot;, height = &quot;100%&quot;, width = &quot;100%&quot;), absolutePanel( top = 75, left = 10, class = &quot;panel panel-default&quot;, selectInput(&quot;town_name&quot;, &quot;Town Name&quot;, choices = c(&quot;None&quot;, sort(towns$location)), selected = &quot;None&quot; ) ) ) ) ) server &lt;- function(input, output, session) { observe({ if (input$town_name != &quot;None&quot;) { town_df &lt;- towns[towns$location == input$town_name, ] leafletProxy(&quot;map&quot;) %&gt;% flyTo(lng = town_df$x, lat = town_df$y, zoom = 10) } else { leafletProxy(&quot;map&quot;) %&gt;% flyToBounds( lng1 = 137.725724, lat1 = -28.903687, lng2 = 151.677076, lat2 = -10.772608 ) } }) output$map &lt;- renderLeaflet({ leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = sa2_polygons, fillColor = &quot;Orange&quot;, color = &quot;black&quot;, weight = 1, group = &quot;Polygons&quot; ) %&gt;% addCircleMarkers( lng = towns$x, lat = towns$y, popup = glue::glue(&quot;&lt;b&gt;Location:&lt;/b&gt; {towns$acute_care_centre}&quot;), radius = 2, fillOpacity = 0, group = &quot;Towns&quot; ) %&gt;% addLayersControl( position = &quot;topright&quot;, baseGroups = c(&quot;None&quot;, &quot;Polygons&quot;), overlayGroups = c(&quot;Towns&quot;), options = layersControlOptions(collapsed = FALSE) ) }) } shinyApp(ui, server) shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir = &quot;input/apps/03-04-leaflet-and-shiny-interactivity/&quot;) We used a range of features from both leaflet and shiny to make iTRAQI interactive. This was a very brief introduction to reactivity and shiny. I recommend reading the sections 1-3 of Mastering Shiny as the next chapter will cover specific tricks to add specific features to your maps won’t do as good of a job introducing the fundamentals of shiny as Mastering Shiny does. "],["iTRAQI-tricks.html", "Chapter 4 iTRAQI tricks", " Chapter 4 iTRAQI tricks This is the beginning of the second part of the book, where all the iTRAQI tricks are detailed. Chapter 5: Asynchronous loading and distracting your user Chapters 6 and 7: Mixing continuous and discrete colour palettes in both leaflet and ggplot2 Layer selection from the control panel addLayersControl vs controls in shiny Updating the map Updating the legend Polygon filters Filters from checkboxes Adding all/none to checkboxes Updating polygon aesthetics layerId vs group Adding javascript to leaflet Updating fillColor and labels Showing a plot in parallel to your map Matching your colour palette between the map and plot Interact with your map from the plot Getting predictions on map_click() Tours Associating tour progression to map content Delayed content Information page "],["async-loading.html", "Chapter 5 Asynchronous loading and distracting your user 5.1 Distracting your user 5.2 Asynchronous loading", " Chapter 5 Asynchronous loading and distracting your user 5.1 Distracting your user We made the following app in the last section of chapter 3 except we only used SA2 polygons. In the iTRAQI app, we use both SA1s and SA2s - this means a lot more detail, many more polygons, and a slower load time. The following code loads both SA1s and SA2s - note how long it takes to run by either copy-pasting the code or running the first runGithub line. (Also, appreciate that a shiny server may load it even slower than the computer, especially if that server has many concurrent users!) shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir = &quot;input/apps/05-01-async-load-1/&quot;) library(shiny) library(leaflet) library(tidyverse) library(sf) input_dir &lt;- &quot;./input&quot; sa_polygons &lt;- readRDS(file.path(input_dir, &quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;)) towns &lt;- read.csv(file.path(input_dir, &quot;df_towns.csv&quot;)) ui &lt;- navbarPage( &quot;App-with-a-map&quot;, id = &quot;nav&quot;, tabPanel( &quot;Map&quot;, div( class = &quot;outer&quot;, tags$head( tags$style(HTML(&quot; div.outer { position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0; } &quot;)) ), leafletOutput(&quot;map&quot;, height = &quot;100%&quot;, width = &quot;100%&quot;) ) ) ) server &lt;- function(input, output, session) { output$map &lt;- renderLeaflet({ leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = sa_polygons, fillColor = &quot;Orange&quot;, color = &quot;black&quot;, weight = 1, group = &quot;Polygons&quot; ) %&gt;% addCircleMarkers( lng = towns$x, lat = towns$y, popup = glue::glue(&quot;&lt;b&gt;Location:&lt;/b&gt; {towns$acute_care_centre}&quot;), radius = 2, fillOpacity = 0, group = &quot;Towns&quot; ) %&gt;% addLayersControl( position = &quot;topright&quot;, baseGroups = c(&quot;None&quot;, &quot;Polygons&quot;), overlayGroups = c(&quot;Towns&quot;), options = layersControlOptions(collapsed = FALSE) ) }) } shinyApp(ui, server) There are a couple things that we can do to ensure our user doesn’t get bored and close the app. The first (and easiest) is to show a fun fact, loading spinner or some other form of brief entertainment. The second option is to load the map asynchronously: we can load part of the map and allow the user access to some of the functionality, and defer loading the computationally expensive parts a bit. For the iTRAQI app, we use both a fun fact/gif/image and asynchronous loading. To show content, we will add a panel which displays over the app, and once the map is created, we will hide it. To do this, we add an absolutePanel() to our UI which has the message and image that we want to display. Here, I use a function, get_display() which gets a random message from those in loading_panel_displays. I format the messages using HTML and therefore need to wrap the display with HTML() when presenting it in theabsolutePanel. Images can be added - here I have used some online but if you have images in the www/ directory of your shiny app, you can use those instead. To hide the panel once the map is created, we need to use {shinyjs}. To allow us to use it’s functions on the UI, we need to include useShinyjs() there. Once the map is made in renderLeafet() on the server side, I hide the absolute panel with shinyjs::hide(\"loadingScreen\"). library(shiny) library(leaflet) library(tidyverse) library(sf) library(glue) library(shinyjs) input_dir &lt;- &quot;./input&quot; sa_polygons &lt;- readRDS(file.path(input_dir, &quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;)) towns &lt;- read.csv(file.path(input_dir, &quot;df_towns.csv&quot;)) loading_panel_displays &lt;- c( paste( sep = &quot;&lt;br&gt;&quot;, &quot;&lt;h2&gt;First fun fact text!&lt;/h2&gt;&quot;, &#39;&lt;img src=&quot;https://www.r-project.org/logo/Rlogo.png&quot; alt=&quot;R&quot; style=&quot;width:200px&quot;&gt;&#39; ), paste( sep = &quot;&lt;br&gt;&quot;, &quot;&lt;h2&gt;Second fun fact text!&lt;/h2&gt;&quot;, &#39;&lt;img src=&quot;https://www.rstudio.com/assets/img/logo.svg&quot; alt=&quot;dog-1&quot; style=&quot;width:200px;&quot;&gt;&#39; ) ) get_display &lt;- function() { loading_panel_displays[sample(1:length(loading_panel_displays), size = 1)] } ui &lt;- navbarPage( &quot;App-with-a-map&quot;, id = &quot;nav&quot;, tabPanel( &quot;Map&quot;, useShinyjs(), div( class = &quot;outer&quot;, tags$head( tags$style(HTML(&quot; div.outer { position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0; } &quot;)) ), leafletOutput(&quot;map&quot;, height = &quot;100%&quot;, width = &quot;100%&quot;), absolutePanel( id = &quot;loadingScreen&quot;, class = &quot;panel panel-default&quot;, fixed = TRUE, draggable = TRUE, left = &quot;50%&quot;, right = &quot;50%&quot;, bottom = &quot;50%&quot;, top = &quot;50%&quot;, width = 500, height = 200, HTML(get_display()) ) ) ) ) server &lt;- function(input, output, session) { output$map &lt;- renderLeaflet({ map &lt;- leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = sa_polygons, fillColor = &quot;Orange&quot;, color = &quot;black&quot;, weight = 1, group = &quot;Polygons&quot; ) %&gt;% addCircleMarkers( lng = towns$x, lat = towns$y, popup = glue::glue(&quot;&lt;b&gt;Location:&lt;/b&gt; {towns$acute_care_centre}&quot;), radius = 2, fillOpacity = 0, group = &quot;Towns&quot; ) %&gt;% addLayersControl( position = &quot;topright&quot;, baseGroups = c(&quot;None&quot;, &quot;Polygons&quot;), overlayGroups = c(&quot;Towns&quot;), options = layersControlOptions(collapsed = FALSE) ) hide(&quot;loadingScreen&quot;) map }) } shinyApp(ui, server) shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir = &quot;input/apps/05-02-async-load-2/&quot;) 5.2 Asynchronous loading You might notice that there is still a delay between the loading screen disappearing and the map appearing. This is because there is still some time between when the map is rendered by the server and it being drawn for us to see. Fortunately, we can make it faster to make and display the initial map if it (initially) lacks the detailed polygons. To load the map asynchronously, we will first render and show a relatively simple map - just the base tiles and the towns. Then, once that’s shown to the user, we will add the polygons to the now available map with leafletProxy(). To trigger this action, we will use a callback. onFlushed() can be used to register functions which occur after shiny flushes the reactive system. In our case, we can use this to trigger the adding of polygons to our map once the shiny system (with the first, simple map) is “flushed”. Since in the iTRAQI app, we have more than one map, we trigger a function with onFlushed() that can trigger all maps, but only those maps on the current tab are actually have the content added. Since we need to check whether (1) we have triggered “to_load” the map, (2) whether the “map” exists to add content to, and (3) whether the map is already completed or not (“map_complete”), we store these in reactive values. These are values which can be updated by our function (triggered by onFlushed()) and observed to trigger the addition of map content. Every time content is flushed, the “to_load” value is updated, this triggers an observe event to add content to the map. If this finds that the map doesn’t exist or it does and the additional content has already been added, it does nothing. If the map exists and it hasn’t had the polygons added (!is.null(rvs$map) &amp; map_complete==FALSE), it adds them, and then updates the map_complete to be TRUE so that it won’t attempt to add the same content again. The end result is that the initial map appears quickly and is interactive and the addition of the polygons happens in the background (hopefully before the user tries to display them). In this example, we hide the loading screen once we have added the polygons but if we are confident that the user is unlikely to try to show them within the first little bit since opening the app, we could move the hide(\"loadingScreen\") back to the renderLeafet(). library(shiny) library(leaflet) library(tidyverse) library(sf) library(glue) library(shinyjs) input_dir &lt;- &quot;./input&quot; sa_polygons &lt;- readRDS(file.path(input_dir, &quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;)) towns &lt;- read.csv(file.path(input_dir, &quot;df_towns.csv&quot;)) loading_panel_displays &lt;- c( paste( sep = &quot;&lt;br&gt;&quot;, &quot;&lt;h2&gt;First fun fact text!&lt;/h2&gt;&quot;, &#39;&lt;img src=&quot;https://www.r-project.org/logo/Rlogo.png&quot; alt=&quot;R&quot; style=&quot;width:200px&quot;&gt;&#39; ), paste( sep = &quot;&lt;br&gt;&quot;, &quot;&lt;h2&gt;Second fun fact text!&lt;/h2&gt;&quot;, &#39;&lt;img src=&quot;https://www.rstudio.com/assets/img/logo.svg&quot; alt=&quot;dog-1&quot; style=&quot;width:200px;&quot;&gt;&#39; ) ) get_display &lt;- function() { loading_panel_displays[sample(1:length(loading_panel_displays), size = 1)] } ui &lt;- navbarPage( &quot;App-with-a-map&quot;, id = &quot;nav&quot;, tabPanel( &quot;Map&quot;, useShinyjs(), div( class = &quot;outer&quot;, tags$head( tags$style(HTML(&quot; div.outer { position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0; } &quot;)) ), leafletOutput(&quot;map&quot;, height = &quot;100%&quot;, width = &quot;100%&quot;), absolutePanel( top = 75, left = 10, class = &quot;panel panel-default&quot;, selectInput(&quot;town_name&quot;, &quot;Town Name&quot;, choices = c(&quot;None&quot;, sort(towns$location)), selected = &quot;None&quot; ) ), absolutePanel( id = &quot;loadingScreen&quot;, class = &quot;panel panel-default&quot;, fixed = TRUE, draggable = TRUE, left = &quot;50%&quot;, right = &quot;50%&quot;, bottom = &quot;50%&quot;, top = &quot;50%&quot;, width = 500, height = 200, HTML(get_display()) ) ) ) ) server &lt;- function(input, output, session) { rvs &lt;- reactiveValues(to_load = NULL, map = NULL, map_complete = FALSE) f &lt;- function() { if (is.null(isolate(rvs$to_load))) rvs$to_load &lt;- 1 if (!is.null(isolate(rvs$to_load)) &amp; !isolate(rvs$map_complete) &amp; !is.null(isolate(rvs$map))) { rvs$to_load &lt;- isolate(rvs$to_load) + 1 } } session$onFlushed(f, once = FALSE) output$map &lt;- renderLeaflet({ rvs$map &lt;- leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers( lng = towns$x, lat = towns$y, popup = glue::glue(&quot;&lt;b&gt;Location:&lt;/b&gt; {towns$acute_care_centre}&quot;), radius = 2, fillOpacity = 0, group = &quot;Towns&quot; ) %&gt;% addLayersControl( position = &quot;topright&quot;, baseGroups = c(&quot;None&quot;, &quot;Polygons&quot;), overlayGroups = c(&quot;Towns&quot;), options = layersControlOptions(collapsed = FALSE) ) rvs$map }) observeEvent(rvs$to_load, { if (is.null(isolate(rvs$map)) | isolate(rvs$map_complete)) { return() } leafletProxy(&quot;map&quot;) %&gt;% addPolygons( data = sa_polygons, fillColor = &quot;Orange&quot;, color = &quot;black&quot;, weight = 1, group = &quot;Polygons&quot; ) hide(&quot;loadingScreen&quot;) if (!isolate(rvs$map_complete)) rvs$map_complete &lt;- TRUE }) } shinyApp(ui, server) shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir = &quot;input/apps/05-03-async-load-3/&quot;) "],["leaflet-colours.html", "Chapter 6 Colours with leaflet 6.1 Colour scales with leaflet 6.2 Legends with leaflet", " Chapter 6 Colours with leaflet This chapter will cover: colour palettes for leaflet continuous discrete a mix (?) legends in leaflet 6.1 Colour scales with leaflet For these examples, we will use the polygons and rasters from iTRAQI. The following chunk downloads these layers (just the same as in chapter 1 but using SA1s this time). library(tidyverse) library(sf) download_layer &lt;- function(layer_name, save_dir = &quot;input&quot;) { githubURL &lt;- glue::glue(&quot;https://raw.githubusercontent.com/RWParsons/iTRAQI_app/main/input/layers/{layer_name}&quot;) download.file(githubURL, file.path(save_dir, layer_name), method = &quot;curl&quot;) readRDS(file.path(save_dir, layer_name)) } raster_layer &lt;- download_layer(&quot;rehab_raster.rds&quot;) %&gt;% raster::raster(., layer = 1) polygons_layer &lt;- download_layer(&quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;) 6.1.1 Palettes for discrete variables For discrete/factor variables, we can use colorFactor to create a palette for leaflet. The example below creates a very similar map to the ABS and we use the same one in the tour tab of the iTRAQI app (except that was using SA1s rather than SA2s). palFac &lt;- colorFactor(&quot;Greens&quot;, levels = 0:4, ordered = TRUE, reverse = TRUE) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = polygons_layer[polygons_layer$SA_level == 2, ], color = &quot;black&quot;, weight = 1, fillOpacity = 1, fillColor = palFac(polygons_layer[polygons_layer$SA_level == 2, ]$ra) ) ## Warning: sf layer has inconsistent datum (+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs). ## Need &#39;+proj=longlat +datum=WGS84&#39; In the code above, we are passing a vector of hex codes as the fillColor argument: one for each polygon. unique(palFac(polygons_layer$ra)) ## [1] &quot;#006D2C&quot; &quot;#31A354&quot; &quot;#74C476&quot; &quot;#BAE4B3&quot; &quot;#EDF8E9&quot; length(palFac(polygons_layer$ra)) == nrow(polygons_layer) ## [1] TRUE For the iTRAQI index, we used a range of colours and did this by specifying a hex code for each one specifically. First, we need to add the index to the polygons_layer. iTRAQI_acute_breaks &lt;- c(-Inf, 1, 2, 4, 6, Inf) iTRAQI_rehab_breaks &lt;- c(-Inf, 1, 2, 4, 6, Inf) get_iTRAQI_index &lt;- function(acute_mins, rehab_mins) { acute_cat &lt;- cut(acute_mins / 60, breaks = iTRAQI_acute_breaks) rehab_cat &lt;- cut(rehab_mins / 60, breaks = iTRAQI_rehab_breaks) acute_label &lt;- as.numeric(acute_cat) rehab_label &lt;- LETTERS[rehab_cat] index_value &lt;- paste0(acute_label, rehab_label) ifelse(index_value == &quot;NANA&quot;, NA, index_value) } polygons_layer &lt;- polygons_layer %&gt;% mutate(index = get_iTRAQI_index(value_acute, value_rehab)) # Create a copy of the polygons layer with only SA2s for faster displaying maps qld_SA2s &lt;- filter(polygons_layer, SA_level == 2) Here are the colours we used for each of levels in the index. index_palette_url &lt;- RCurl::getURL(&quot;https://raw.githubusercontent.com/RWParsons/iTRAQI_app/main/input/index_palette.csv&quot;) index_palette &lt;- read.csv(text = index_palette_url) %&gt;% select(Acute, Rehab, hex = hex2) %&gt;% cbind(., iTRAQI_bins = (na.omit(unique(polygons_layer$index)) %&gt;% sort())) knitr::kable((index_palette)) Acute Rehab hex iTRAQI_bins &lt;1 A #ffe699 1A &lt;1 B #ffd966 1B 1-2 A #ffc000 2A 1-2 B #ffa700 2B 2-4 A #ff8457 3A 2-4 B #ff6600 3B 2-4 C #ff4900 3C 2-4 D #ff2f25 3D 4-6 B #e6005d 4B 4-6 C #d20055 4C 4-6 D #b00047 4D 4-6 E #8a003e 4E 6+ C #700055 5C 6+ D #420032 5D 6+ E #0d0d0d 5E No we can create the palette in the same was now as we did before with the remoteness map. paliTRAQI &lt;- colorFactor( index_palette$hex, levels = index_palette$iTRAQI_bins, ordered = FALSE ) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA2s, color = &quot;black&quot;, weight = 1, fillOpacity = 1, fillColor = paliTRAQI(qld_SA2s$index) ) ## Warning: sf layer has inconsistent datum (+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs). ## Need &#39;+proj=longlat +datum=WGS84&#39; 6.1.2 Palettes for continuous variables For the rasters, we used continuous colour scales. leaflet() %&gt;% addTiles() %&gt;% addRasterImage( x = raster_layer ) Since the raster is a grid of values, we don’t need to pass a huge vector of hex codes, but instead we need to pass a function which can take that value and return a hex code. But still, there are options. We could use a binned colour scheme to make an isochrone type map as below. bins &lt;- c(0, 30, 60, 120, 180, 240, 300, 360, 900, 1200) palBin &lt;- colorBin(&quot;YlOrRd&quot;, domain = 0:1200, bins = bins, na.color = &quot;transparent&quot;) leaflet() %&gt;% addTiles() %&gt;% addRasterImage( x = raster_layer, colors = palBin ) ## Warning in colors(.): Some values were outside the color scale and will be ## treated as NA And our other option is to use a continuous colour scale. palNum &lt;- colorNumeric(&quot;YlOrRd&quot;, domain = 0:1200, na.color = &quot;transparent&quot;) leaflet() %&gt;% addTiles() %&gt;% addRasterImage( x = raster_layer, colors = palNum ) ## Warning in colors(.): Some values were outside the color scale and will be ## treated as NA 6.1.3 A mix of continuous and discrete colour scales This may sound like an odd thing to want to do: in the iTRAQI app, you may notice that we use the same legend and colour scale for all of our time-to-care maps, and that the scale on the legend is not linear from 0 to 1200 minutes. Fortunately, we can make make a (hacky) mix of both colorbin and colorNumeric to give specified breaks to a continuous scale. (We can also display the legend as if it were the colorBin legend.) The first thing to consider is that the palette passed to colors argument doesn’t need to be made with a single palette from leaflet. Instead, we can merge many within a parent function. Here’s a smaller example. palNumLow &lt;- colorNumeric(&quot;Greens&quot;, domain = 0:300) palNumHigh &lt;- colorNumeric(&quot;Reds&quot;, domain = 300:1200) pal_combined &lt;- function(x) { case_when( x &lt;= 300 ~ palNumLow(x), x &gt; 300 ~ palNumHigh(x), TRUE ~ &quot;transparent&quot; ) } leaflet() %&gt;% addTiles() %&gt;% addRasterImage( x = raster_layer, colors = pal_combined ) ## Warning in palNumLow(x): Some values were outside the color scale and will be ## treated as NA ## Warning in palNumHigh(x): Some values were outside the color scale and will be ## treated as NA What a truly hideous colour scale! Here, we used one colour scale (“Greens”) for values between 0 and 300 minutes, and another scale (“Reds”) for values from 300 to 1200! The good thing is that we can now mix and match scales any which way we desire, and combine several numeric scales across unevenly spaced breaks to create a single, continuous palette which doesn’t get washed out due to the extremes in the domain. Note that in our drive times here, we have times from the Torres Strait which were around 1200 minutes! Using any of the sequential colour palettes would mean that the differences across most of mainland QLD would appear to be smaller than they are as we would require the domain of the palette to accomodate for these extremely large times. In the code below, we start out by using the bins that we had defined for the palBin(). We can then use the sequence of colours from the palBin, at each bin, as the end-range colours within a range of colorNumeric’s. By doing this, palNum1 is now a continuous colour scale from the first to the second level of palBin, palNum2 is a continuous scale from the second to third level of palBin…. For the last one, palNum9, we go from the deepest colour within the palBin to black. palBin &lt;- colorBin(&quot;YlOrRd&quot;, domain = min(bins):max(bins), bins = bins, na.color = &quot;transparent&quot;) palNum1 &lt;- colorNumeric(c(palBin(bins[1]), palBin(bins[2])), domain = 0:30, na.color = &quot;transparent&quot;) palNum2 &lt;- colorNumeric(c(palBin(bins[2]), palBin(bins[3])), domain = 30:60, na.color = &quot;transparent&quot;) palNum3 &lt;- colorNumeric(c(palBin(bins[3]), palBin(bins[4])), domain = 60:120, na.color = &quot;transparent&quot;) palNum4 &lt;- colorNumeric(c(palBin(bins[4]), palBin(bins[5])), domain = 120:180, na.color = &quot;transparent&quot;) palNum5 &lt;- colorNumeric(c(palBin(bins[5]), palBin(bins[6])), domain = 180:240, na.color = &quot;transparent&quot;) palNum6 &lt;- colorNumeric(c(palBin(bins[6]), palBin(bins[7])), domain = 240:300, na.color = &quot;transparent&quot;) palNum7 &lt;- colorNumeric(c(palBin(bins[7]), palBin(bins[8])), domain = 300:360, na.color = &quot;transparent&quot;) palNum8 &lt;- colorNumeric(c(palBin(bins[8]), palBin(bins[9])), domain = 360:900, na.color = &quot;transparent&quot;) palNum9 &lt;- colorNumeric(c(palBin(bins[9]), &quot;#000000&quot;), domain = 900:1200, na.color = &quot;transparent&quot;) We can then combine all of these within a parent function which can then be called with any value. Since palNum9 approaches values of 1200 and blackness, all values above 1200 are black. palNumMix &lt;- function(x) { case_when( x &lt; 30 ~ palNum1(x), x &lt; 60 ~ palNum2(x), x &lt; 120 ~ palNum3(x), x &lt; 180 ~ palNum4(x), x &lt; 240 ~ palNum5(x), x &lt; 300 ~ palNum6(x), x &lt; 360 ~ palNum7(x), x &lt; 900 ~ palNum8(x), x &lt; 1200 ~ palNum9(x), x &gt;= 1200 ~ &quot;#000000&quot;, TRUE ~ &quot;transparent&quot; ) } The end result is a much more appropriate colour scale than either the binned or (the original) continuous colour scales. For iTRAQI, we used this colour scale for both the rasters and the polygons (except for the index). leaflet() %&gt;% addTiles() %&gt;% addRasterImage( x = raster_layer, colors = palNumMix ) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA2s, color = &quot;black&quot;, weight = 1, fillOpacity = 1, fillColor = palNumMix(qld_SA2s$value_rehab) ) 6.2 Legends with leaflet There are a couple ways that you can make legends in leaflet. The first is to use leaflet’s addLegend(). This works well for the binned or continuous colour scale, but it won’t work for the mixed colour scale. leaflet() %&gt;% addTiles() %&gt;% addRasterImage( x = raster_layer, colors = palBin ) %&gt;% addLegend( position = &quot;bottomright&quot;, pal = palBin, values = 0:1200 ) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA2s, color = &quot;black&quot;, weight = 1, fillOpacity = 1, fillColor = palNum(qld_SA2s$value_rehab) ) %&gt;% addLegend( position = &quot;bottomright&quot;, pal = palNum, values = 0:1200 ) The biggest problem here is when we want to add the continuous scale to the rehab map within iTRAQI. Here, we used a continuous legend from 0 to 20 hours, and the custom palette we made (palNumMixed). Since we can’t pass this palette to addLegend, we have to get help from a new package, {leaflegend}. This package allows you to add more customisable legends to your leaflet map, and it also lets us pass our hacky colour scale we made to generate the legend. Firstly, to make the legend display in hours, we make a(nother) parent function palNumMixHours which wraps palNumMixed but converts from minutes to hours. This way, we can add colours to the actual map with palNumMix but create the legend using palNumMixHours so that the values on the legend are in hours. library(leaflegend) palNumMixHours &lt;- function(x) palNumMix(x * 60) leaflet() %&gt;% addTiles() %&gt;% addRasterImage( x = raster_layer, colors = palNumMix ) %&gt;% addLegendNumeric( pal = palNumMixHours, position = &quot;topright&quot;, height = 250, width = 24, bins = 10, value = c(-0.01, 0:20, 20.1), htmltools::tagList(tags$div(&quot;Time to care (hours)&quot;), tags$br()) ) The legends on the main map of iTRAQI also use leaflegend but this was sort of optional. They’re very similar to legend we made using addLegend for the raster above but since we used leaflegend for the rehab map, we thought it’d be best to keep the styling consistent. Also, being able to format the size and title of the legend easily with leaflegend was a nice feature. Here’s what we used for the non-index layers of the main map. leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA2s, color = &quot;black&quot;, weight = 1, fillOpacity = 1, fillColor = palNum(qld_SA2s$value_rehab) ) %&gt;% addLegendBin( opacity = 1, position = &quot;topright&quot;, pal = palBin, values = 0:900, title = htmltools::tagList(tags$div(&quot;Time to care (minutes)&quot;), tags$br()) ) ## Warning: sf layer has inconsistent datum (+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs). ## Need &#39;+proj=longlat +datum=WGS84&#39; If you’re interested in incorporating an interactive plot alongside your map as we did, chapter 7 will help you match your colour scales between your ggplot and maps. If not, you can skip to 8. "],["ggplot2-colours.html", "Chapter 7 Using a leaflet palette in ggplot 7.1 Basic scatterplot with {ggplot2} 7.2 Colouring the scatterplot with the iTRAQI colours 7.3 Colouring the scatterplot with our custom-palette’s colours", " Chapter 7 Using a leaflet palette in ggplot This chapter will cover: matching ggplot2 colour scales to the leaflet colour palettes with: continuous colour scales binned colour scales For these examples, we will use the polygons from iTRAQI and be manipulating the ggplot colour palettes as the app does to create the scatter plot on the main map (available when any SA1 or SA2 layer is selected). The following chunk downloads these layers and colour palettes (just the same as in chapters 1 and (leaflet-colours) but using SA1s this time). library(tidyverse) library(sf) download_layer &lt;- function(layer_name, save_dir = &quot;input&quot;) { githubURL &lt;- glue::glue(&quot;https://raw.githubusercontent.com/RWParsons/iTRAQI_app/main/input/layers/{layer_name}&quot;) download.file(githubURL, file.path(save_dir, layer_name), method = &quot;curl&quot;) readRDS(file.path(save_dir, layer_name)) } polygons_layer &lt;- download_layer(&quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;) Before we start, we will load our polygons and palettes from the last chapter: Here, we create the same palette we used for the leaflet map, the same way as we did in the previous chapter. iTRAQI_acute_breaks &lt;- c(-Inf, 1, 2, 4, 6, Inf) iTRAQI_rehab_breaks &lt;- c(-Inf, 1, 2, 4, 6, Inf) get_iTRAQI_index &lt;- function(acute_mins, rehab_mins) { acute_cat &lt;- cut(acute_mins / 60, breaks = iTRAQI_acute_breaks) rehab_cat &lt;- cut(rehab_mins / 60, breaks = iTRAQI_rehab_breaks) acute_label &lt;- as.numeric(acute_cat) rehab_label &lt;- LETTERS[rehab_cat] index_value &lt;- paste0(acute_label, rehab_label) ifelse(index_value == &quot;NANA&quot;, NA, index_value) } polygons_layer &lt;- polygons_layer %&gt;% mutate(index = get_iTRAQI_index(value_acute, value_rehab)) qld_SA1s &lt;- filter(polygons_layer, SA_level == 1) qld_SA1s_df &lt;- as.data.frame(qld_SA1s) %&gt;% select(CODE, value_acute, value_rehab, index) %&gt;% na.omit() index_palette_url &lt;- RCurl::getURL(&quot;https://raw.githubusercontent.com/RWParsons/iTRAQI_app/main/input/index_palette.csv&quot;) index_palette &lt;- read.csv(text = index_palette_url) %&gt;% select(Acute, Rehab, hex = hex2) %&gt;% cbind(., iTRAQI_bins = (na.omit(unique(polygons_layer$index)) %&gt;% sort())) paliTRAQI &lt;- colorFactor( index_palette$hex, levels = index_palette$iTRAQI_bins, ordered = FALSE ) 7.1 Basic scatterplot with {ggplot2} Here’s our starting point. An uncoloured scatter plot of rehab and acute travel times for each SA2 area qld_SA1s_df %&gt;% ggplot(aes(value_rehab, value_acute)) + geom_point(size = 2, alpha = 0.5) + theme_bw() + labs( y = &quot;Acute time (minutes)&quot;, x = &quot;Rehab time (minutes)&quot; ) + scale_y_continuous(breaks = seq(0, 1000, by = 120)) + scale_x_continuous(breaks = seq(0, 1500, by = 120)) 7.2 Colouring the scatterplot with the iTRAQI colours If we add the index to the colour aesthetic, we get the desired effect in the plot, but not to the colour palette we have on the main map. qld_SA1s_df %&gt;% ggplot(aes(value_rehab, value_acute, col = index)) + geom_point(size = 2, alpha = 0.5) + theme_bw() + labs( y = &quot;Acute time (minutes)&quot;, x = &quot;Rehab time (minutes)&quot; ) + scale_y_continuous(breaks = seq(0, 1000, by = 120)) + scale_x_continuous(breaks = seq(0, 1500, by = 120)) To apply the paliTRAQI colours to the scatter plot, we use scale_colour_manual to manually assign values (hex codes) as well as specifying the limits to include all possible values. qld_SA1s_df %&gt;% ggplot(aes(value_rehab, value_acute, col = index)) + geom_point(size = 2, alpha = 0.5) + theme_bw() + labs( y = &quot;Acute time (minutes)&quot;, x = &quot;Rehab time (minutes)&quot; ) + scale_y_continuous(breaks = seq(0, 1000, by = 120)) + scale_x_continuous(breaks = seq(0, 1500, by = 120)) + scale_colour_manual( values = paliTRAQI(index_palette$iTRAQI_bins), limits = index_palette$iTRAQI_bins ) 7.3 Colouring the scatterplot with our custom-palette’s colours First, we load the palette that we used for the leaflet map with unevenly spaced bins bins &lt;- c(0, 30, 60, 120, 180, 240, 300, 360, 900, 1200) palBin &lt;- colorBin(&quot;YlOrRd&quot;, domain = min(bins):max(bins), bins = bins, na.color = &quot;transparent&quot;) palNum1 &lt;- colorNumeric(c(palBin(bins[1]), palBin(bins[2])), domain = 0:30, na.color = &quot;transparent&quot;) palNum2 &lt;- colorNumeric(c(palBin(bins[2]), palBin(bins[3])), domain = 30:60, na.color = &quot;transparent&quot;) palNum3 &lt;- colorNumeric(c(palBin(bins[3]), palBin(bins[4])), domain = 60:120, na.color = &quot;transparent&quot;) palNum4 &lt;- colorNumeric(c(palBin(bins[4]), palBin(bins[5])), domain = 120:180, na.color = &quot;transparent&quot;) palNum5 &lt;- colorNumeric(c(palBin(bins[5]), palBin(bins[6])), domain = 180:240, na.color = &quot;transparent&quot;) palNum6 &lt;- colorNumeric(c(palBin(bins[6]), palBin(bins[7])), domain = 240:300, na.color = &quot;transparent&quot;) palNum7 &lt;- colorNumeric(c(palBin(bins[7]), palBin(bins[8])), domain = 300:360, na.color = &quot;transparent&quot;) palNum8 &lt;- colorNumeric(c(palBin(bins[8]), palBin(bins[9])), domain = 360:900, na.color = &quot;transparent&quot;) palNum9 &lt;- colorNumeric(c(palBin(bins[9]), &quot;#000000&quot;), domain = 900:1200, na.color = &quot;transparent&quot;) palNumMix &lt;- function(x) { case_when( x &lt; 30 ~ palNum1(x), x &lt; 60 ~ palNum2(x), x &lt; 120 ~ palNum3(x), x &lt; 180 ~ palNum4(x), x &lt; 240 ~ palNum5(x), x &lt; 300 ~ palNum6(x), x &lt; 360 ~ palNum7(x), x &lt; 900 ~ palNum8(x), x &lt; 1200 ~ palNum9(x), x &gt;= 1200 ~ &quot;#000000&quot;, TRUE ~ &quot;transparent&quot; ) } To colour the points to the palNumMix palette, we need to use scale_colour_gradientn(). The tricky bit to apply in the app here, is to be able to create the this colour scale for either the acute or rehab time. Here, I’ll declare these as arguments so the generating of the colour scale is closer to how it’s done in the app. care_type_selected &lt;- &quot;value_acute&quot; if (care_type_selected == &quot;value_acute&quot;) { df_plot &lt;- qld_SA1s_df %&gt;% mutate(selected_col = value_acute) } else if (care_type_selected == &quot;value_rehab&quot;) { df_plot &lt;- qld_SA1s_df %&gt;% mutate(selected_col = value_rehab) } minimum &lt;- min(df_plot$selected_col, na.rm = TRUE) maximum &lt;- max(df_plot$selected_col, na.rm = TRUE) col_bins &lt;- c(minimum, bins[(bins &gt; minimum &amp; bins &lt; maximum)], maximum) df_plot %&gt;% ggplot(aes(value_rehab, value_acute, col = selected_col)) + geom_point(size = 2, alpha = 0.5) + theme_bw() + labs( y = &quot;Acute time (minutes)&quot;, x = &quot;Rehab time (minutes)&quot; ) + scale_y_continuous(breaks = seq(0, 1000, by = 120)) + scale_x_continuous(breaks = seq(0, 1500, by = 120)) + scale_colour_gradientn( colours = palNumMix(col_bins), values = scales::rescale(col_bins) ) If we change the first line in the chunk above to be: care_type_selected &lt;- &quot;value_rehab&quot; The plot changes to be colour the points according to the rehab time, and using the same scale. This is implemented in the iTRAQI app in a nifty way that allows the user’s selection of the layer to trigger both changes on the map and the associated plot. There’s also an additional feature of removing points on the plot (but actually only setting alpha=0) that are filtered out using the filters on the control panel. We also don’t bother showing the legend on the plot because this would be replicating the legend made for leaflet. How these systems interact will be described in Chapter (shiny-colours) "],["shiny-colours.html", "Chapter 8 Getting your map layers and colours communicating 8.1 leafletControl() 8.2 shiny inputs to select layers 8.3 Updating a shape’s aesthetic.", " Chapter 8 Getting your map layers and colours communicating This chapter will cover: Selecting a layer using leafletcontrol() versus shiny inputs Updating a shape’s style to reduce load time Putting the previous two chapters all together in the shiny app and getting them to talk to each other For these examples, we will use the polygons and rasters from iTRAQI. library(tidyverse) library(sf) download_layer &lt;- function(layer_name, save_dir = &quot;input&quot;) { githubURL &lt;- glue::glue(&quot;https://raw.githubusercontent.com/RWParsons/iTRAQI_app/main/input/layers/{layer_name}&quot;) download.file(githubURL, file.path(save_dir, layer_name), method = &quot;curl&quot;) readRDS(file.path(save_dir, layer_name)) } raster_layer &lt;- download_layer(&quot;rehab_raster.rds&quot;) %&gt;% raster::raster(., layer = 1) polygons_layer &lt;- download_layer(&quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;) This chapter will show the different ways we can show different layers on our map. 8.1 leafletControl() Suppose we want to be able to select between three layers, a layer showing remoteness in SA1s and two that show the travel time to acute and rehab care, respectively. Here, we first load some palettes to use for our drive times and remoteness maps. For the remoteness layer, we use greens. Check Chapter 6 for more details on how these palettes work and making the iTRAQI index palette (not used here). # palette for remoteness index paLFac &lt;- colorFactor(&quot;Greens&quot;, levels = 0:4, ordered = TRUE, reverse = TRUE) # create index for drive times bins &lt;- c(0, 30, 60, 120, 180, 240, 300, 360, 900, 1200) palBin &lt;- colorBin(&quot;YlOrRd&quot;, domain = min(bins):max(bins), bins = bins, na.color = &quot;transparent&quot;) palNum1 &lt;- colorNumeric(c(palBin(bins[1]), palBin(bins[2])), domain = 0:30, na.color = &quot;transparent&quot;) palNum2 &lt;- colorNumeric(c(palBin(bins[2]), palBin(bins[3])), domain = 30:60, na.color = &quot;transparent&quot;) palNum3 &lt;- colorNumeric(c(palBin(bins[3]), palBin(bins[4])), domain = 60:120, na.color = &quot;transparent&quot;) palNum4 &lt;- colorNumeric(c(palBin(bins[4]), palBin(bins[5])), domain = 120:180, na.color = &quot;transparent&quot;) palNum5 &lt;- colorNumeric(c(palBin(bins[5]), palBin(bins[6])), domain = 180:240, na.color = &quot;transparent&quot;) palNum6 &lt;- colorNumeric(c(palBin(bins[6]), palBin(bins[7])), domain = 240:300, na.color = &quot;transparent&quot;) palNum7 &lt;- colorNumeric(c(palBin(bins[7]), palBin(bins[8])), domain = 300:360, na.color = &quot;transparent&quot;) palNum8 &lt;- colorNumeric(c(palBin(bins[8]), palBin(bins[9])), domain = 360:900, na.color = &quot;transparent&quot;) palNum9 &lt;- colorNumeric(c(palBin(bins[9]), &quot;#000000&quot;), domain = 900:1200, na.color = &quot;transparent&quot;) palNumMix &lt;- function(x) { case_when( x &lt; 30 ~ palNum1(x), x &lt; 60 ~ palNum2(x), x &lt; 120 ~ palNum3(x), x &lt; 180 ~ palNum4(x), x &lt; 240 ~ palNum5(x), x &lt; 300 ~ palNum6(x), x &lt; 360 ~ palNum7(x), x &lt; 900 ~ palNum8(x), x &lt; 1200 ~ palNum9(x), x &gt;= 1200 ~ &quot;#000000&quot;, TRUE ~ &quot;transparent&quot; ) } The simplest approach to giving the user the option to change between layers is to add a control panel with leaflet using addLayersControl. However, when the difference between these layers is the aesthetic but not the shape of the polygon, this means that the initial load time of the map is slowed! In the map below, we had to add the SA2 polygons to the map twice and this slowed down the load time. qld_SA2s &lt;- filter(polygons_layer, SA_level == 2) qld_SA1s &lt;- filter(polygons_layer, SA_level == 1) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA1s, color = &quot;black&quot;, weight = 1, fillOpacity = 1, fillColor = paLFac(qld_SA1s$ra), group = &quot;SA1 Remoteness&quot; ) %&gt;% addPolygons( data = qld_SA2s, color = &quot;black&quot;, weight = 1, fillOpacity = 1, fillColor = palNumMix(qld_SA2s$value_acute), group = &quot;SA2 Acute Travel Time&quot; ) %&gt;% addPolygons( data = qld_SA2s, color = &quot;black&quot;, weight = 1, fillOpacity = 1, fillColor = palNumMix(qld_SA2s$value_rehab), group = &quot;SA2 Rehab Travel Time&quot; ) %&gt;% addLayersControl( position = &quot;topright&quot;, baseGroups = c(&quot;SA1 Remoteness&quot;, &quot;SA2 Acute Travel Time&quot;, &quot;SA2 Rehab Travel Time&quot;), options = layersControlOptions(collapsed = FALSE) ) There are some benefits to using this approach. The main one being that since the control is on the front end, and done by leaflet, the compute effort of changing the displayed layer doesn’t require any additional compute from the shiny server. This is on theme with the recent push for server-less shiny and using observable in quarto documents to get shiny-like behaviour without requiring a shiny server! This approach may also be fine if you don’t have many layers to swap between, they’re not very detailed (unlike SA1 polygons), if you don’t care too much about load time, or if don’t need to trigger any other changes to your app when the selected layer changes. (Un)fortunately for us, iTRAQI had all these things! 8.2 shiny inputs to select layers Firstly, we need to move our control of the layers to shiny inputs rather than using leafletControl(). In this example, aside from replicating what we had with the layerControl() selection, we also add a “None” option to deselect all layers. We use absolutePanel() to create a space over the top of the map that we can put shiny inputs. On it, we add an input for layer_selection using radioButtons(). On the server side, we include a corresponding observe that looks at the input$layer_selection and correspondingly shows and hides groups (using showGroup() and hideGroup()) on the leaflet map, accessed by leafletProxy(). The app is shown below but can it can be run directly from your R console using the following line: shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir = &quot;input/apps/08-01-shiny-layer-controls-1/&quot;) For the rest of this chapter, when there are example shiny apps, the shiny::runGitHub() option will come after the app code. library(shiny) library(leaflet) library(tidyverse) library(sf) input_dir &lt;- &quot;./input&quot; polygons_layer &lt;- readRDS(file.path(input_dir, &quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;)) ui &lt;- navbarPage( &quot;App-with-a-map&quot;, id = &quot;nav&quot;, tabPanel( &quot;Map&quot;, div( class = &quot;outer&quot;, tags$head( tags$style(HTML(&quot; div.outer { position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0; } &quot;)) ), leafletOutput(&quot;map&quot;, height = &quot;100%&quot;, width = &quot;100%&quot;), absolutePanel( id = &quot;controls&quot;, class = &quot;panel panel-default&quot;, fixed = TRUE, draggable = TRUE, top = 50, left = &quot;auto&quot;, right = 10, bottom = &quot;auto&quot;, width = 330, height = 200, h4(&quot;Layer&quot;), radioButtons( inputId = &quot;layer_selection&quot;, label = NULL, choices = c( &quot;None&quot;, &quot;SA1 Remoteness&quot;, &quot;SA2 Acute Travel Time&quot;, &quot;SA2 Rehab Travel Time&quot; ), selected = &quot;None&quot; ) ) ) ) ) server &lt;- function(input, output, session) { observeEvent(input$layer_selection, { # Find out which groups need to be shown and which need to be hidden based on input$layer_selection. layer_options &lt;- c(&quot;SA1 Remoteness&quot;, &quot;SA2 Acute Travel Time&quot;, &quot;SA2 Rehab Travel Time&quot;) if (input$layer_selection == &quot;None&quot;) { show_group &lt;- c() } else { show_group &lt;- input$layer_selection } hide_groups &lt;- layer_options[layer_options != input$layer_selection] leafletProxy(&quot;map&quot;) %&gt;% hideGroup(hide_groups) %&gt;% showGroup(show_group) }) output$map &lt;- renderLeaflet({ leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA1s, color = &quot;black&quot;, weight = 1, fillOpacity = 1, fillColor = paLFac(qld_SA1s$ra), group = &quot;SA1 Remoteness&quot; ) %&gt;% addPolygons( data = qld_SA2s, color = &quot;black&quot;, weight = 1, fillOpacity = 1, fillColor = palNumMix(qld_SA2s$value_acute), group = &quot;SA2 Acute Travel Time&quot; ) %&gt;% addPolygons( data = qld_SA2s, color = &quot;black&quot;, weight = 1, fillOpacity = 1, fillColor = palNumMix(qld_SA2s$value_rehab), group = &quot;SA2 Rehab Travel Time&quot; ) }) } shinyApp(ui, server) This gets us back to where we were when using leafletControl(). Fortunately, we can use this control panel differently with shiny to reduce that load time! 8.3 Updating a shape’s aesthetic. Since we are wanting to show the same shapes (polygons) with each of the selections in the above app, it doesn’t really make sense for us to load the same polygons 3 times! The only difference is the fillColor but they’re otherwise the same shapes. This approach is taken from timelyportfolio’s comment here. Since we are separating out some new javascript content to make this work, we can also move our css style that makes our map larger there too. leaflet_css_and_js &lt;- tags$head( tags$style(HTML(&quot; div.outer { position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0; } &quot;)), # add in methods from https://github.com/rstudio/leaflet/pull/598 tags$script(HTML( &#39; window.LeafletWidget.methods.setStyle = function(category, layerId, style){ var map = this; if (!layerId){ return; } else if (!(typeof(layerId) === &quot;object&quot; &amp;&amp; layerId.length)){ // in case a single layerid is given layerId = [layerId]; } //convert columnstore to row store style = HTMLWidgets.dataframeToD3(style); //console.log(style); layerId.forEach(function(d,i){ var layer = map.layerManager.getLayer(category, d); if (layer){ // or should this raise an error? layer.setStyle(style[i]); } }); }; window.LeafletWidget.methods.setRadius = function(layerId, radius){ var map = this; if (!layerId){ return; } else if (!(typeof(layerId) === &quot;object&quot; &amp;&amp; layerId.length)){ // in case a single layerid is given layerId = [layerId]; radius = [radius]; } layerId.forEach(function(d,i){ var layer = map.layerManager.getLayer(&quot;marker&quot;, d); if (layer){ // or should this raise an error? layer.setRadius(radius[i]); } }); }; &#39; )) ) setShapeStyle &lt;- function(map, data = getMapData(map), layerId, stroke = NULL, color = NULL, weight = NULL, opacity = NULL, fill = NULL, fillColor = NULL, fillOpacity = NULL, dashArray = NULL, smoothFactor = NULL, noClip = NULL, options = NULL) { options &lt;- c( list(layerId = layerId), options, filterNULL(list( stroke = stroke, color = color, weight = weight, opacity = opacity, fill = fill, fillColor = fillColor, fillOpacity = fillOpacity, dashArray = dashArray, smoothFactor = smoothFactor, noClip = noClip )) ) # evaluate all options options &lt;- evalFormula(options, data = data) # make them the same length (by building a data.frame) options &lt;- do.call(data.frame, c(options, list(stringsAsFactors = FALSE))) layerId &lt;- options[[1]] style &lt;- options[-1] # drop layer column leaflet::invokeMethod(map, data, &quot;setStyle&quot;, &quot;shape&quot;, layerId, style) } This function lets us update the fillColor of the polygons, allowing us to only have the one polygon layer when we load the app, and updating the color when the user selects a different layer on the control panel. In this first example, we will only show the SA2 layer and let the control panel switch between showing the acute and rehab travel time. Something else you may notice is that setShapeStyle updates the aesthetics of a shape by the specific layerId rather than the group as a whole. Therefore, we can add the layerId to the polygon when we add it to the map initially, and refer to these id’s when we call setShapeStyle. Since we are only using the SA2 polygons in this example, we can just use the unique codes for each area (CODE) as layerId’s as these are unique to each polygon within the layer. library(shiny) library(leaflet) library(tidyverse) library(sf) input_dir &lt;- &quot;./input&quot; polygons_layer &lt;- readRDS(file.path(input_dir, &quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;)) qld_SA2s &lt;- filter(polygons_layer, SA_level == 2) ui &lt;- navbarPage( &quot;App-with-a-map&quot;, id = &quot;nav&quot;, tabPanel( &quot;Map&quot;, div( class = &quot;outer&quot;, leaflet_css_and_js, leafletOutput(&quot;map&quot;, height = &quot;100%&quot;, width = &quot;100%&quot;), absolutePanel( id = &quot;controls&quot;, class = &quot;panel panel-default&quot;, fixed = TRUE, draggable = TRUE, top = 50, left = &quot;auto&quot;, right = 10, bottom = &quot;auto&quot;, width = 330, height = 200, h4(&quot;Layer&quot;), radioButtons( inputId = &quot;layer_selection&quot;, label = NULL, choices = c( &quot;None&quot;, &quot;SA2 Acute&quot;, &quot;SA2 Rehab&quot; ), selected = &quot;None&quot; ) ) ) ) ) server &lt;- function(input, output, session) { observeEvent(input$layer_selection, { # find out what the care type was - will either be &quot;acute&quot; or &quot;rehab&quot; as that&#39;s the first word care_type_selected &lt;- str_extract(tolower(input$layer_selection), &quot;[a-z]*$&quot;) f_update_fill &lt;- function(map) { fill &lt;- switch(care_type_selected, &quot;acute&quot; = palNumMix(qld_SA2s$value_acute), &quot;rehab&quot; = palNumMix(qld_SA2s$value_rehab) ) setShapeStyle( map = map, layerId = qld_SA2s$CODE, fillColor = fill ) %&gt;% showGroup(&quot;qld_SA2s&quot;) } if (input$layer_selection == &quot;None&quot;) { leafletProxy(&quot;map&quot;) %&gt;% hideGroup(&quot;qld_SA2s&quot;) } else { leafletProxy(&quot;map&quot;) %&gt;% f_update_fill() } }) output$map &lt;- renderLeaflet({ leaflet() %&gt;% addTiles() %&gt;% addPolygons( data = qld_SA2s, color = &quot;black&quot;, weight = 1, fillOpacity = 1, group = &quot;qld_SA2s&quot;, layerId = qld_SA2s$CODE ) }) } shinyApp(ui, server) shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir = &quot;input/apps/08-02-setShapeStyle/&quot;) In this app, we can give the user the ability to select between acute and rehab travel times but without having to load the polygon layer twice! We will use the setShapeStyle() function to modify the fillColor at every opportunity now as it drastically reduces the app load time. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
