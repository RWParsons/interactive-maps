[["index.html", "Interactive maps with leaflet Preface Suggested citation Author affiliations Prerequisites", " Interactive maps with leaflet Rex Parsons 2022-05-27 Preface Suggested citation TODO: add citation Author affiliations Rex Parsons is a PhD Candidate at the Australian Centre Health Services Innovation, Queensland University of Technology (QUT). He developed the iTRAQI shiny app within his role as Senior Research Assistant at the ARC Centre of Excellence for Mathematical &amp; Statistical Frontiers (ACEMS). Prerequisites This book is intended as a non-comprehensive guide to developing interactive maps with leaflet and shiny and covers the methods that were used in developing the iTRAQI shiny app. Since this book does focus on the applied problem of developing the iTRAQI shiny app, it includes specific methods used there that may be otherwise tricky to find. There is a very small amount of javascript and css used to add certain features to leaflet. I’m not an expert in either of these languages so will not explain in detail how they work but will link to the sources that may explain it better. For a more comprehensive introduction to leaflet, see the leaflet documentation. For a more comprehensive introduction to shiny, see the Mastering Shiny book A beginner-to-intermediate level of R is assumed. Below is a list of packages that will be used. You can run the code to install those that are missing on your system. pkgs &lt;- c( &quot;tidyverse&quot;, &quot;sf&quot;, &quot;shiny&quot;, &quot;leaflet&quot; ) required_packages &lt;- pkgs[!pkgs %in% installed.packages()] if(length(required_packages)&gt;0) { cat(&quot;Installing the following packages: \\n&quot;, paste0(required_packages, collapse=&quot;, &quot;)) install.packages(required_packages) } else { cat(&quot;All required packages already installed!&quot;) } "],["intro.html", "Chapter 1 Introduction 1.1 leaflet layers", " Chapter 1 Introduction This book focuses on using leaflet and shiny together to make interactive maps. Here’s a simple leaflet map. library(leaflet) leaflet() %&gt;% addTiles() %&gt;% # Add default OpenStreetMap map tiles addMarkers(lng=174.768, lat=-36.852, popup=&quot;The birthplace of R&quot;) Figure 1.1: Simple leaflet map Before we begin adding to this map, we need to create the layers that we want to add. In the iTRAQI app, we used markers, rasters and polygons to show the key locations and interpolations. See the iTRAQI shiny app here and read more about it in the information tab of the app. Chapter 2 will focus on these first steps, before making any maps or interactivity. If you’re already well-versed in making these layers and the sf R package, you can skip to the latter chapters. 1.1 leaflet layers To display statistical area level 1 and 2 (SA1 and SA2) regions on the map, we will be using sf objects with MULTIPOLYGON geometries. These are multipolygons because some of these areas include distinct areas, such as a set of islands, that aren’t contained within a single polygon. To display the location of acute and rehab centers and town locations with travel times that we used for interpolations, we used (spatial) data.frames that had longitudes and latitudes for their location. To display the continuous interpolations, we used RasterLayer objects. Using a polygon and raster layer that’s used in the iTRAQI map and some markers in a data.frame, we can make see the basic approach that we use to display these on a leaflet map. First, lets make a data.frame with the coordinates for the Princess Alexandra and Townsville University Hospitals, and download a raster and polygon layer from the iTRAQI app GitHub repository. library(tidyverse) library(sf) download_layer &lt;- function(layer_name, save_dir=&quot;input&quot;) { githubURL &lt;- glue::glue(&quot;https://raw.githubusercontent.com/RWParsons/iTRAQI_app/main/input/layers/{layer_name}&quot;) download.file(githubURL, file.path(save_dir, layer_name), method=&quot;curl&quot;) readRDS(file.path(save_dir, layer_name)) } raster_layer &lt;- download_layer(&quot;rehab_raster.rds&quot;) %&gt;% raster::raster(., layer=1) polygons_layer &lt;- download_layer(&quot;stacked_SA1_and_SA2_polygons_year2016_simplified.rds&quot;) polygons_layer &lt;- polygons_layer[polygons_layer$SA_level==2, ] # show SA2 regions for example marker_locations &lt;- data.frame( centre_name=c(&quot;Princess Alexandra Hospital (PAH)&quot;, &quot;Townsville University Hospital&quot;), x=c(153.033519, 146.762041), y=c(-27.497374, -19.320502) ) Here, in figure 1.2, we make a leaflet map with the three object types. We will use these three functions, addPolygons(), addRasterImage(), and addMarkers() to add almost all of the content to our leaflet maps. leaflet() %&gt;% addProviderTiles(&quot;CartoDB.VoyagerNoLabels&quot;) %&gt;% # add a simple base map addPolygons( data=polygons_layer, fillColor=&quot;Orange&quot;, color=&quot;black&quot;, weight=1, group=&quot;Polygons&quot; ) %&gt;% addRasterImage( x=raster_layer, colors=&quot;YlOrRd&quot;, group=&quot;Raster&quot; ) %&gt;% addMarkers( lng=marker_locations$x, lat=marker_locations$y, label=marker_locations$centre_name, group=&quot;Points&quot; ) %&gt;% addLayersControl( position=&quot;topright&quot;, baseGroups=c(&quot;Polygons&quot;, &quot;Raster&quot;, &quot;Points&quot;), options=layersControlOptions(collapsed = FALSE) ) Figure 1.2: leaflet map with polygons, rasters and markers Almost all of these objects were made before being used in the shiny app. Chapter 2 will introduce the methods used to make them. Chapter 3 will introduce the basics of a shiny app. Chapter 4 will introduce the more specific methods that were used to construct the iTRAQI app itself. "],["building.html", "Chapter 2 Creating the layers 2.1 Kriging 2.2 Polygons", " Chapter 2 Creating the layers This chapter will cover the necessary steps to make layers which will be visualised in the app: kriging spatial joins aggregating interpolations within polygons 2.1 Kriging Kriging is an interpolation method that we use for iTRAQI. We pass observed values with known outcomes and coordinates and use kriging to get predicted values for new coordinates (the rest of Queensland). 2.1.1 Data First, we will download the data that we used for acute care travel time. Each row in the data has a coordinate (x,y) and outcome that we will be using for interpolation (time) Table 2.1 and figure 2.1 show a preview of the data that we will be using. library(tidyverse) library(leaflet) save_dir &lt;- &quot;input&quot; githubURL &lt;- glue::glue(&quot;https://raw.githubusercontent.com/RWParsons/iTRAQI_app/main/input/QLD_locations_with_RSQ_times_20220518.csv&quot;) download.file(githubURL, file.path(save_dir, &quot;df_acute.csv&quot;), method=&quot;curl&quot;) df_acute &lt;- read.csv(file.path(save_dir, &quot;df_acute.csv&quot;)) %&gt;% select(location, x, y, centre=acute_care_centre, time=acute_time) knitr::kable( head(df_acute, 10), caption = &#39;A preview of the data used for kriging&#39;, booktabs = TRUE ) Table 2.1: A preview of the data used for kriging location x y centre time Wallangarra 151.9262 -28.92345 Brisbane (PAH/RBWH) 195 Texas 151.1692 -28.85306 Brisbane (PAH/RBWH) 195 Smithfield 145.6902 -16.83142 Townsville University Hospital 183 Johnstone 148.5382 -28.67870 Brisbane (PAH/RBWH) 345 Stanthorpe 151.9327 -28.65779 Brisbane (PAH/RBWH) 170 Dirranbandi 148.2271 -28.58410 Brisbane (PAH/RBWH) 345 Yelarbon 150.7524 -28.57416 Brisbane (PAH/RBWH) 216 Goondiwindi 150.3062 -28.54799 Brisbane (PAH/RBWH) 216 Inglewood 151.0795 -28.41751 Brisbane (PAH/RBWH) 183 Killarney 152.2963 -28.33305 Brisbane (PAH/RBWH) 149 leaflet() %&gt;% addProviderTiles(&quot;CartoDB.VoyagerNoLabels&quot;) %&gt;% addCircleMarkers( lng=df_acute$x, lat=df_acute$y, popup=glue::glue( # customise your popups with html tags &quot;&lt;b&gt;Location: &lt;/b&gt;{df_acute$location}&lt;br&gt;&quot;, &quot;&lt;b&gt;Time to acute care (minutes): &lt;/b&gt;{df_acute$time}&quot;), radius=2, fillOpacity=0, ) Figure 2.1: leaflet map with locations We will convert our data.frame into a spatial data.frame and load the gstat package as we will be using it for the kriging (gstat::krige()). library(sp) library(gstat) library(sf) coordinates(df_acute) &lt;- ~ x + y 2.1.2 Making a grid of values for interpolation Another key ingredient to do kriging is to have a grid of coordinates for which we want predictions (QLD). The code below achieves this by creating a grid across all coordinates of QLD and keeping only those which intersect with the QLD boundary polygon. The initial grid contains coordinates for all combinations of latitudes and longitudes in QLD (which includes a lot of water of the north east for which we don’t need interpolated values). Figure 2.2 shows the initial grid made using sp::makegrid() in blue and the intersect between this and the QLD boundary in orange. We will use the values which are within the QLD boundary for kriging. The cellsize we use here is large to save computation time (and to highlight a problem that we will come across very soon). This controls the resolution of the interpolation - the smaller the cellsize, the greater the spatial resolution. This is in degrees units (0.1 degree = 11.1km) so only having one prediction for every 11.1km² in QLD may mean that we miss out on some valuable information! (I’ll come back to this!) aus &lt;- raster::getData(&#39;GADM&#39;, path=&quot;input&quot;, country = &#39;AUS&#39;, level = 1) qld_boundary &lt;- aus[aus$NAME_1 == &quot;Queensland&quot;,] qld_boundary_sf &lt;- st_as_sfc(qld_boundary) cellsize &lt;- 0.05 grid &lt;- makegrid(qld_boundary, cellsize = cellsize) pnts_sf &lt;- st_as_sf(grid, coords = c(&#39;x1&#39;, &#39;x2&#39;), crs = st_crs(qld_boundary)) pnts_in_qld &lt;- st_intersection(pnts_sf, qld_boundary_sf) %&gt;% st_coordinates() %&gt;% as.data.frame() ggplot() + geom_point(data=grid, aes(x1, x2), col=&quot;blue&quot;) + geom_point(data=pnts_in_qld, aes(X, Y), col=&quot;orange&quot;) + coord_equal() + labs( x=&quot;Longitude&quot;, y=&quot;Latitude&quot; ) Figure 2.2: coordinates that we will use for kriging (initial grid in blue and those than intersect with QLD boundary in orange) 2.1.3 Kriging (finally) Now we are ready to do the kriging. gstat::krige() requires that the newdata be of class Spatial, sf, or stars. Here, I specify the coordinates using sp::coordinates(). It also requires that you specify the variogram model within - here we use a circular model vgm(\"Cir\") but there may be better choices for other data. Figure 2.3 shows the map with the interpolated values from kriging. lzn_vgm &lt;- variogram(time ~ 1, df_acute) lzn_fit &lt;- fit.variogram(lzn_vgm, model=vgm(&quot;Sph&quot;)) coordinates(pnts_in_qld) &lt;- ~ X + Y kriged_layer &lt;- krige( formula=time ~ 1, locations=df_acute, newdata=pnts_in_qld, model=lzn_fit ) %&gt;% as.data.frame() ## [using ordinary kriging] ggplot(data=kriged_layer, aes(X, Y, col=var1.pred)) + geom_point() + scale_colour_gradientn(colors=c(&quot;yellow&quot;, &quot;orange&quot;, &quot;red&quot;, &quot;black&quot;)) + coord_equal() + labs( x=&quot;Longitude&quot;, y=&quot;Latitude&quot; ) Figure 2.3: coordinates that we will use for kriging (initial grid in blue and those than intersect with QLD boundary in orange) 2.1.4 Making rasters Now we can turn our grid of interpolated values into the rasters that we can then use in a leaflet map. We use the raster package. Figure ?? shows our kriged output as a raster on a leaflet map, the same type of objects as what’s used in iTRAQI. raster_layer &lt;- raster::rasterFromXYZ(kriged_layer, crs=4326, res=0.05) raster_layer &lt;- raster::raster(raster_layer, layer=1) # layer=1 to select the prediction values rather than the variance leaflet() %&gt;% addProviderTiles(&quot;CartoDB.VoyagerNoLabels&quot;) %&gt;% addRasterImage(x=raster_layer, colors=&quot;YlOrRd&quot;) Figure 2.4: coordinates that we will use for kriging (initial grid in blue and those than intersect with QLD boundary in orange) 2.2 Polygons We are going to download our polygons from the Australian Bureau of Statistics. The link to the downloads page for the 2016 Australian Statistical Geography Standard (ASGS) files are here and the particular file that we are going to download is the ‘Queensland Mesh Blocks ASGS Ed 2016 Digital Boundaries in ESRI Shapefile Format’. You will have to download the zipped file and unzip it somewhere locally. I’ve done so and saved it in the same directory as the other downloaded files and unzipped it into a folder there called ‘qld_shape’. Having done that, I can import it using st_read() qld_SAs2016 &lt;- st_read(file.path(save_dir, &quot;qld_shape/MB_2016_QLD.shp&quot;)) ## Reading layer `MB_2016_QLD&#39; from data source ## `C:\\Users\\Rex\\Documents\\R_projects\\interactive-maps\\input\\qld_shape\\MB_2016_QLD.shp&#39; ## using driver `ESRI Shapefile&#39; ## replacing null geometries with empty geometries ## Simple feature collection with 69764 features and 16 fields (with 25 geometries empty) ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 137.9943 ymin: -29.1779 xmax: 153.5522 ymax: -9.142176 ## Geodetic CRS: GDA94 head(qld_SAs2016) ## Simple feature collection with 6 features and 16 fields (with 1 geometry empty) ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 144.5488 ymin: -22.97163 xmax: 147.0728 ymax: -19.24556 ## Geodetic CRS: GDA94 ## MB_CODE16 MB_CAT16 SA1_MAIN16 SA1_7DIG16 SA2_MAIN16 SA2_5DIG16 ## 1 30000009499 NOUSUALRESIDENCE 39999949999 3949999 399999499 39499 ## 2 30000010000 Parkland 31802148912 3148912 318021489 31489 ## 3 30000020000 Parkland 31802148912 3148912 318021489 31489 ## 4 30000030000 Parkland 31802148912 3148912 318021489 31489 ## 5 30000050000 Residential 31503140809 3140809 315031408 31408 ## 6 30000160000 Residential 31503140808 3140808 315031408 31408 ## SA2_NAME16 SA3_CODE16 SA3_NAME16 SA4_CODE16 ## 1 No usual address (Qld) 39999 No usual address (Qld) 399 ## 2 Townsville - South 31802 Townsville 318 ## 3 Townsville - South 31802 Townsville 318 ## 4 Townsville - South 31802 Townsville 318 ## 5 Barcaldine - Blackall 31503 Outback - South 315 ## 6 Barcaldine - Blackall 31503 Outback - South 315 ## SA4_NAME16 GCC_CODE16 GCC_NAME16 STE_CODE16 ## 1 No usual address (Qld) 39499 No usual address (Qld) 3 ## 2 Townsville 3RQLD Rest of Qld 3 ## 3 Townsville 3RQLD Rest of Qld 3 ## 4 Townsville 3RQLD Rest of Qld 3 ## 5 Queensland - Outback 3RQLD Rest of Qld 3 ## 6 Queensland - Outback 3RQLD Rest of Qld 3 ## STE_NAME16 AREASQKM16 geometry ## 1 Queensland 0.0000 POLYGON EMPTY ## 2 Queensland 0.0387 POLYGON ((147.0641 -19.2466... ## 3 Queensland 0.0071 POLYGON ((147.0715 -19.2576... ## 4 Queensland 0.0004 POLYGON ((147.0615 -19.2460... ## 5 Queensland 0.0432 POLYGON ((145.2406 -22.9713... ## 6 Queensland 0.2156 POLYGON ((144.5493 -22.5902... This data has polygons for every Statistical Area level 1 (SA1) in Queensland but also details the SA2, SA3, and SA4 that that area is within. If we want to only use SA1’s then we are fine to use the data here, but if we want to use these higher levels too, then we would either need (1) make a new object with dissolved boundaries within that higher level or (2) download more files from the ABS for those specific levels and filter to keep only Queensland. These files that we could use, say for SA2’s are called ‘Statistical Area Level 2 (SA2) ASGS Ed 2016 Digital Boundaries in ESRI Shapefile Format’, available at that same link. Since it’s easy to filter, and reading this book is about learning new things (and my github repository is limited to 100mb), I’ll show you the first approach that aggregates polygons within these higher levels. Before we make a function to aggregate within different levels, I’m going to rename the columns in the object so that they’re all named consistently - you may have noticed the unique identifier for SA1’s is called ‘SA1_MAIN16’ whereas for SA3’s it’s called ‘SA3_CODE16’. I prefer ‘CODE’. qld_SAs2016 &lt;- rename(qld_SAs2016, SA1_CODE16=SA1_MAIN16, SA2_CODE16=SA2_MAIN16) 2.2.1 Dissolving polygons to get SA2s The function below will dissolve the boundaries for all the polygons within the SA-level that we pick. The work here is done by rmapshaper::ms_dissolve(). I’ll use this to make separate objects for SA2s and SA3s. Since this returns back only the geometry of the polygon and the name, I’ll make the same change for my SA1s. By selecting only the code, I get the object with the code AND the geometry - unless I transform the object into a data.frame first, it will always keep the geometry. aggregate_by_SA &lt;- function(qld_sf, SA_number){ sa_main &lt;- glue::glue(&#39;SA{SA_number}_CODE16&#39;) if(!sa_main %in% names(qld_sf)) return(message(sa_main, &quot; was not found in polygon layer&quot;)) message(glue::glue(&#39;----- grouping polygons within SA{SA_number} -----&#39;)) rmapshaper::ms_dissolve(qld_sf, sa_main) } qld_SA2s &lt;- aggregate_by_SA(qld_sf=qld_SAs2016, SA_number=2) ## ----- grouping polygons within SA2 ----- ## Registered S3 method overwritten by &#39;geojsonlint&#39;: ## method from ## print.location dplyr qld_SA3s &lt;- aggregate_by_SA(qld_sf=qld_SAs2016, SA_number=3) ## ----- grouping polygons within SA3 ----- qld_SA1s &lt;- qld_SAs2016 %&gt;% select(SA1_CODE16) head(qld_SA1s) ## Simple feature collection with 6 features and 1 field (with 1 geometry empty) ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 144.5488 ymin: -22.97163 xmax: 147.0728 ymax: -19.24556 ## Geodetic CRS: GDA94 ## SA1_CODE16 geometry ## 1 39999949999 POLYGON EMPTY ## 2 31802148912 POLYGON ((147.0641 -19.2466... ## 3 31802148912 POLYGON ((147.0715 -19.2576... ## 4 31802148912 POLYGON ((147.0615 -19.2460... ## 5 31503140809 POLYGON ((145.2406 -22.9713... ## 6 31503140808 POLYGON ((144.5493 -22.5902... head(qld_SA2s) ## Simple feature collection with 6 features and 1 field (with 1 geometry empty) ## Geometry type: GEOMETRY ## Dimension: XY ## Bounding box: xmin: 141.4665 ymin: -25.75471 xmax: 147.2964 ymax: -12.56014 ## Geodetic CRS: GDA94 ## SA2_CODE16 geometry ## 1 399999499 MULTIPOLYGON EMPTY ## 2 318021489 MULTIPOLYGON (((147.0641 -1... ## 3 315031408 POLYGON ((143.6141 -22.5387... ## 4 306051166 POLYGON ((145.4269 -17.1212... ## 5 306051169 POLYGON ((145.5535 -17.1354... ## 6 315011395 MULTIPOLYGON (((141.765 -12... There are some empty geometries here, so we find (and then remove) these using st_is_empty(). qld_SA1s &lt;- qld_SA1s[!st_is_empty(qld_SA1s), , drop=FALSE] qld_SA2s &lt;- qld_SA2s[!st_is_empty(qld_SA2s), , drop=FALSE] qld_SA3s &lt;- qld_SA3s[!st_is_empty(qld_SA3s), , drop=FALSE] Run the code to become impatient and find out how long it takes leaflet to display such a detailed polygon layer. leaflet() %&gt;% addTiles() %&gt;% addPolygons( data=qld_SA1s, fillColor=&quot;Orange&quot;, color=&quot;black&quot;, weight=1 ) 2.2.2 Simplifying polygons to reduce rendering time with leaflet We need to do something about this - fortunately, we don’t need all the incredible amounts of detail in the polygons for our map, so we can simplify them using rmapshaper::ms_simplify(). Simplifying the polygons can take a few minutes but it makes the maps much faster to display. qld_SA1s &lt;- rmapshaper::ms_simplify(qld_SA1s, keep=0.03) qld_SA2s &lt;- rmapshaper::ms_simplify(qld_SA2s, keep=0.03) qld_SA3s &lt;- rmapshaper::ms_simplify(qld_SA3s, keep=0.03) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data=qld_SA1s, fillColor=&quot;yellow&quot;, color=&quot;black&quot;, weight=1, group=&quot;SA1&quot; ) %&gt;% addPolygons( data=qld_SA2s, fillColor=&quot;orange&quot;, color=&quot;black&quot;, weight=1, group=&quot;SA2&quot; ) %&gt;% addPolygons( data=qld_SA3s, fillColor=&quot;red&quot;, color=&quot;black&quot;, weight=1, group=&quot;SA3&quot; ) %&gt;% addLayersControl( position=&quot;topright&quot;, baseGroups=c(&quot;SA1&quot;, &quot;SA2&quot;, &quot;SA3&quot;), options=layersControlOptions(collapsed = FALSE) ) 2.2.3 Spatial joins and aggregations To get estimates and ranges for travel times within each SA1 and SA2 for iTRAQI, we aggregated the interpolated values within those polygons. To do this, we need to first (1) join the data that we made from kriging to the polygons data, and (2) aggregate the values within those areas to calculate the summary statistics that we want to show. Here is the data that we made from kriging previously. head(select(kriged_layer, -var1.var), 5) ## X Y var1.pred ## 1 151.35 -29.15 204.9349 ## 2 151.40 -29.15 204.0813 ## 3 151.30 -29.10 203.9246 ## 4 151.35 -29.10 202.9899 ## 5 151.40 -29.10 202.1970 2.2.3.1 Joins We do this join using sf::st_join() but this requires that both the sf objects for the polygons and the kriging points share the same coordinates system. First, we need to make our kriging data into a spatial data.frame then set the coordinate reference system (crs) to match. The polygons that we downloaded from the ABS used the GDA94 reference system and this can be matched to EPSG:4283 online. kriged_df &lt;- kriged_layer %&gt;% select(-var1.var) coordinates(kriged_df) &lt;- ~ X + Y kriged_sf &lt;- st_as_sf(kriged_df) kriged_sf &lt;- st_set_crs(kriged_sf, 4283) Having asigned the appropriate crs, we can use st_join (if the crs of both objects isn’t the same, st_join will throw an error). Now the resulting object has about the same number of features (rows) as we had in the interpolation data qld_SA3s_joined &lt;- st_join(qld_SA3s, kriged_sf) head(qld_SA3s_joined) ## Simple feature collection with 6 features and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 146.1469 ymin: -19.7847 xmax: 147.1202 ymax: -18.92276 ## Geodetic CRS: GDA94 ## SA3_CODE16 var1.pred geometry ## 1 31802 79.97241 MULTIPOLYGON (((146.3237 -1... ## 1.1 31802 81.29616 MULTIPOLYGON (((146.3237 -1... ## 1.2 31802 83.43087 MULTIPOLYGON (((146.3237 -1... ## 1.3 31802 71.45434 MULTIPOLYGON (((146.3237 -1... ## 1.4 31802 70.50484 MULTIPOLYGON (((146.3237 -1... ## 1.5 31802 70.27281 MULTIPOLYGON (((146.3237 -1... nrow(qld_SA3s_joined) ## [1] 60863 nrow(kriged_df) ## [1] 60888 2.2.3.2 Aggregations If you’re familiar with the dplyr:: ways of grouping and aggregating, then this step will be familiar to working with data.frames. To this larger dataset within the unique polygons, we use group_by and summarise. Here, we will get the minimum, maximum, and median of the predicted values. qld_SA3s_aggregated &lt;- qld_SA3s_joined %&gt;% group_by(SA3_CODE16) %&gt;% summarize( min=min(var1.pred), max=max(var1.pred), median=median(var1.pred) ) Unfortunately, this is incredibly slow for some reason! It’s much faster to take the data out from the sf object, do the aggregations and then join it back to the original sf object before we did the join. qld_SA3s_joined_df &lt;- as.data.frame(qld_SA3s_joined) %&gt;% select(-geometry) qld_SA3s_aggregated_df &lt;- qld_SA3s_joined_df %&gt;% group_by(SA3_CODE16) %&gt;% summarize( min=min(var1.pred), max=max(var1.pred), median=median(var1.pred) ) qld_SA3s_aggregated &lt;- left_join(qld_SA3s, qld_SA3s_aggregated_df, by=&quot;SA3_CODE16&quot;) To check that these aggregations look right, lets make a map to visualise the medians across different SA3s. fill_value &lt;- qld_SA3s_aggregated$median pal &lt;- colorNumeric(&quot;YlOrRd&quot;, domain=fill_value) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data=qld_SA3s_aggregated, fillColor=pal(qld_SA3s_aggregated$median), color=&quot;black&quot;, weight=1, fillOpacity = 0.8 ) Looks good… except? leaflet() %&gt;% addTiles() %&gt;% addPolygons( data=qld_SA3s_aggregated, fillColor=pal(qld_SA3s_aggregated$median), color=&quot;black&quot;, weight=1, fillOpacity = 0.8 ) %&gt;% setView(153.026358, -27.468562, zoom=11) There’s a section which is greyed out - this means that the aggregations returned NA. Let’s plot the coordinates which we have interpolated values for from kriging over the top. kriged_coordinates &lt;- as.data.frame(coordinates(kriged_df)) %&gt;% filter(X &lt; 153.5, X &gt; 152.3, Y &lt; -27, Y &gt; -28) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data=qld_SA3s_aggregated, fillColor=pal(qld_SA3s_aggregated$median), color=&quot;black&quot;, weight=1, fillOpacity = 0.8 ) %&gt;% setView(153.026358, -27.468562, zoom=11) %&gt;% addCircleMarkers( lng=kriged_coordinates$X, lat=kriged_coordinates$Y, radius=0.2 ) Looks like we missed the target with our the coordinates that we have interpolations for! There was a little primer to this problem when introducing the for kriging grid. There are a couple solutions to this (that I can think of): Do a ludicrously granular grid for kriging so that we almost certainly have a point within every polygon, say every 50 square meters. We add some points to the grid for kriging so that we ensure that we have at least 1 or more points within each polygon. For iTRAQI, we did the latter. SA1s can be pretty small, so I don’t want to have to keep trying smaller and smaller cell sizes for the kriging grid until I don’t get any NA’s. It’s easier (and a lot faster) to get the centroid (coordinate for the centre) of every polygon and append this to the grid we use for kriging. You can get the centroid of each polygon by using sf::st_centroid() and the coordinates out of this object with st_coordinates(). In the map below, we get these centroids and add them as additional coordinates to the map in red. centroids &lt;- st_centroid(qld_SA3s, of_largest_polygon=TRUE) centroid_coords &lt;- as.data.frame(st_coordinates(centroids)) leaflet() %&gt;% addTiles() %&gt;% addPolygons( data=qld_SA3s_aggregated, fillColor=pal(qld_SA3s_aggregated$median), color=&quot;black&quot;, weight=1, fillOpacity = 0.8 ) %&gt;% setView(153.026358, -27.468562, zoom=11) %&gt;% addCircleMarkers( lng=kriged_coordinates$X, lat=kriged_coordinates$Y, radius=0.2 ) %&gt;% addCircleMarkers( lng=centroid_coords$X, lat=centroid_coords$Y, color=&quot;red&quot;, radius=0.2 ) They’re on target! The remaining steps would be to append this to the grid used for kriging, repeat the spatial join and aggregate within polygons. However, I’m going to skip these steps and get straight into the shiny app development using the polygons that I’ve already made for iTRAQI. "],["shiny-intro.html", "Chapter 3 An app with a map 3.1 A bare bones shiny app", " Chapter 3 An app with a map This chapter will have a brief intro to shiny with a map: ui and server reactivity leaflet leafletproxy 3.1 A bare bones shiny app The most basic shiny app has a user-interface (ui) and a back-end (server) side. We control what content appears where on within the ui, and we control all the clever interactivity and generated content on the server side. library(shiny) ui &lt;- fluidPage( ) server &lt;- function(input, output, session) { } shinyApp(ui, server) This book will include many example shiny apps and accompanying code. However, since it’d be very time consuming to host all those apps independently, I will instead provide the code and sometimes an image of how the app displays. With every example app there will be a followup line of code with shiny::runGitHub(...) that you can use to run the app locally. If you run this line in R on your own computer, it will run the app in a way that you can then interact with it. The inputs on the ui side always have an inputId and it is by this name that we access those values from the server. In the code below, we name an input as ‘n’ and we access it in the server by calling input$n. By accessing this input in such as way, within the expression used for renderPlot(), we are are asking the server side to update the plot every time that any inputs (input$___) used within it are updated. library(shiny) ui &lt;- fluidPage( numericInput(inputId=&#39;n&#39;, label=&#39;sample size&#39;, value=10), plotOutput(&#39;plot&#39;) ) server &lt;- function(input, output, session) { output$plot &lt;- renderPlot({ hist(x=rnorm(input$n)) }) } shinyApp(ui, server) ## ## Listening on http://127.0.0.1:6064 (And here’s your code to run the app locally) shiny::runGitHub(&quot;RWParsons/interactive-maps&quot;, subdir=&quot;input/apps/01-example-app/&quot;) "],["shiny-methods.html", "Chapter 4 An app with a map", " Chapter 4 An app with a map This chapter will have a brief intro to shiny with a map: ui and server reactivity leaflet leafletproxy "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
